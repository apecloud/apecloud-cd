name: Manifests Charts Save

on:
  workflow_dispatch:
    inputs:
      MANIFESTS_FILE:
        description: "The file path to save"
        type: string
        required: true
        default: ''
      RELEASE_VERSION:
        description: 'The version of release'
        type: string
        required: false
        default: ''
      GITHUB_REPO:
        description: "The github repo to save"
        type: string
        required: false
        default: ''
      GITHUB_REF:
        description: "The github repo ref to save"
        type: string
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      CHARTS_NAME:
        description: "The charts package name to save"
        type: string
        required: false
        default: 'kubeblocks-enterprise'
      BOT_TYPE:
        description: 'The bot type (e.g. release/package/specify)'
        type: string
        required: false
        default: 'specify'
      BOT_WEBHOOK:
        description: 'The bot webhook'
        type: string
        required: false
        default: ''
      KUBEBLOCKS_ADDON_BRANCH:
        description: "The branch of kubeblocks-addons"
        type: string
        required: false
        default: ''
      APECLOUD_ADDON_BRANCH:
        description: "The branch of apecloud-addons"
        type: string
        required: false
        default: ''
  workflow_call:
    inputs:
      MANIFESTS_FILE:
        description: "The file path to save"
        type: string
        required: true
        default: ''
      RELEASE_VERSION:
        description: 'The version of release'
        type: string
        required: false
        default: ''
      GITHUB_REPO:
        description: "The github repo to save"
        type: string
        required: false
        default: ''
      GITHUB_REF:
        description: "The github repo ref to save"
        type: string
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      CHARTS_NAME:
        description: "The charts package name to save"
        type: string
        required: false
        default: 'kubeblocks-enterprise'
      BOT_TYPE:
        description: 'The bot type (e.g. release/package/specify)'
        type: string
        required: false
        default: 'specify'
      BOT_WEBHOOK:
        description: 'The bot webhook'
        type: string
        required: false
        default: ''
      KUBEBLOCKS_ADDON_BRANCH:
        description: "The branch of kubeblocks-addons"
        type: string
        required: false
        default: ''
      APECLOUD_ADDON_BRANCH:
        description: "The branch of apecloud-addons"
        type: string
        required: false
        default: ''


run-name: save chart ${{ inputs.CHARTS_NAME }} ${{ inputs.RELEASE_VERSION }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
  OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
  OSS_ENDPOINT: "oss-cn-zhangjiakou.aliyuncs.com"
  OSS_BUCKET: "kubeblocks-oss"
  HELM_VERSION: "v3.16.3"
  CHART_PROJECT_ID: ${{ secrets.GITLAB_PROJECT_ID }}
  CHART_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}
  CHART_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}

jobs:
  save-charts:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.save-charts.outputs.release-version }}
      air-gap-tool-result: ${{ steps.upload_air_gap_tool.outputs.air_gap_tool_result }}
    steps:
      - name: Checkout Code
        if: ${{ inputs.GITHUB_REPO == '' }}
        uses: actions/checkout@v4

      - name: Checkout ${{ inputs.GITHUB_REPO }} Code
        if: ${{ inputs.GITHUB_REPO != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.GITHUB_REPO }}
          path: ./
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ inputs.GITHUB_REF }}

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ inputs.APECD_REF }}

      - name: Checkout kubeblocks-addons Code
        uses: actions/checkout@v4
        if: ${{ inputs.KUBEBLOCKS_ADDON_BRANCH != '' }}
        with:
          repository: apecloud/kubeblocks-addons
          path: kubeblocks-addons
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ inputs.KUBEBLOCKS_ADDON_BRANCH }}

      - name: Checkout apecloud-addons Code
        uses: actions/checkout@v4
        if: ${{ inputs.APECLOUD_ADDON_BRANCH != '' }}
        with:
          repository: apecloud/apecloud-addons
          path: apecloud-addons
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ inputs.APECLOUD_ADDON_BRANCH }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: manifests charts save
        id: save-charts
        run: |
          MANIFESTS_FILE="${{ inputs.MANIFESTS_FILE }}"
          RELEASE_VERSION="${{ inputs.RELEASE_VERSION }}"
          if [[ -z "${RELEASE_VERSION}" && -f ${MANIFESTS_FILE} ]]; then
              RELEASE_VERSION="$(yq e ".kubeblocks-cloud[0].version"  ${MANIFESTS_FILE})"
          fi
          echo "release-version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          
          echo "update manifests version to ${RELEASE_VERSION}"
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/manifests_version_update.sh "${MANIFESTS_FILE}" "${RELEASE_VERSION}"
          
          echo "save manifests charts"
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/manifests_charts_save.sh "${MANIFESTS_FILE}" "${RELEASE_VERSION}"

      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          access-key-id: "${{ env.OSS_KEY_ID }}"
          access-key-secret: "${{ env.OSS_KEY_SECRET }}"
          endpoint: "${{ env.OSS_ENDPOINT }}"

      - name: Upload manifests to oss
        run: |
          MANIFESTS_FILE="${{ inputs.MANIFESTS_FILE }}"
          VALUES_FILE="${MANIFESTS_FILE%/*}/deploy-values.yaml"
          RELEASE_VERSION="${{ inputs.RELEASE_VERSION }}"
          ossutil cp -rf ./${MANIFESTS_FILE} oss://${{ env.OSS_BUCKET }}/manifests/${RELEASE_VERSION}/manifests.yaml
          upload_ret=$?
          if [[ $upload_ret -eq 0 ]]; then
              echo "upload ${MANIFESTS_FILE} to oss successfully"
          else
              echo "upload ${MANIFESTS_FILE} to oss failed"
          fi 
          ossutil cp -rf ./${VALUES_FILE} oss://${{ env.OSS_BUCKET }}/manifests/${RELEASE_VERSION}/values.yaml
          upload_ret=$?
          if [[ $upload_ret -eq 0 ]]; then
              echo "upload ${VALUES_FILE} to oss successfully"
          else
              echo "upload ${VALUES_FILE} to oss failed"
          fi

      - name: Upload air-gap tool to oss
        id: upload_air_gap_tool
        run: |
          AIR_GAP_TOOL_RESULT=""
          if [[ -d "fountain/air-gap" ]]; then
              cd fountain
              RELEASE_VERSION="${{ inputs.RELEASE_VERSION }}"
              AIR_GAP_NAME="air-gap"
              AIR_GAP_TOOL_NAME="kbe-airgap-tool-${RELEASE_VERSION}.tar.gz"
              echo "tar ${AIR_GAP_NAME}"
              tar -czvf ${AIR_GAP_TOOL_NAME} ${AIR_GAP_NAME}
              
              ossutil cp -rf ./${AIR_GAP_TOOL_NAME} oss://${{ env.OSS_BUCKET }}/tools/apecloud/${AIR_GAP_TOOL_NAME}
              upload_ret=$?
              if [[ $upload_ret -eq 0 ]]; then
                  AIR_GAP_TOOL_RESULT="success"
                  echo "upload ${AIR_GAP_TOOL_NAME} to oss successfully"
              else
                  AIR_GAP_TOOL_RESULT="error"
                  echo "upload ${AIR_GAP_TOOL_NAME} to oss failed"
              fi
          fi
          echo "air_gap_tool_result=${AIR_GAP_TOOL_RESULT}" >> $GITHUB_OUTPUT

      - name: Upload charts to oss
        id: upload_to_oss
        run: |
          CHART_PKG_NAME="${{ inputs.CHARTS_NAME }}-charts-${{ steps.save-charts.outputs.release-version }}.tar.gz"
          ossutil cp -rf ./${CHART_PKG_NAME} oss://${{ env.OSS_BUCKET }}/charts/${CHART_PKG_NAME}
          upload_ret=$?
          if [[ $upload_ret -eq 0 ]]; then
              echo "upload ${CHART_PKG_NAME} to oss successfully"
          else
              exit 1
          fi

  save-result:
    runs-on: ubuntu-latest
    needs: [ save-charts ]
    if: ${{ always() }}
    outputs:
      chart-pkg-name: ${{ steps.get_save_result.outputs.chart_pkg_name }}
      save-result: ${{ steps.get_save_result.outputs.save_result }}
      air-gap-tool-pkg-name: ${{ steps.get_save_result.outputs.air_gap_tool_pkg_name }}
      save-air-gap-tool-result: ${{ steps.get_save_result.outputs.save_air_gap_tool_result }}
    steps:
      - name: get save result
        id: get_save_result
        run: |
          SAVE_RESULT="error"
          CHART_PKG_NAME="${{ inputs.CHARTS_NAME }}-charts-${{ needs.save-charts.outputs.release-version }}.tar.gz"
          if [[ "${{ needs.save-charts.result }}" == "success" ]]; then
              SAVE_RESULT="success"
              CHART_PKG_NAME="http://kubeblocks-oss.${{ env.OSS_ENDPOINT }}/charts/${CHART_PKG_NAME}"
          fi
          echo 'save_result='$SAVE_RESULT >> $GITHUB_OUTPUT
          echo 'chart_pkg_name='${CHART_PKG_NAME} >> $GITHUB_OUTPUT
          
          AIR_GAP_TOOL_RESULT="${{ needs.save-charts.outputs.air-gap-tool-result }}"
          AIR_GAP_TOOL_PKG_NAME="kbe-airgap-tool-${{ needs.save-charts.outputs.release-version }}.tar.gz"
          if [[ "AIR_GAP_TOOL_RESULT" == "success" ]]; then
              AIR_GAP_TOOL_PKG_NAME="http://kubeblocks-oss.${{ env.OSS_ENDPOINT }}/tools/apecloud/${AIR_GAP_TOOL_PKG_NAME}"
          fi
          echo 'save_air_gap_tool_result='${AIR_GAP_TOOL_RESULT} >> $GITHUB_OUTPUT
          echo 'air_gap_tool_pkg_name='${AIR_GAP_TOOL_PKG_NAME} >> $GITHUB_OUTPUT

  send-message:
    needs: [ save-result ]
    if: ${{ always() }}
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "2"
      CONTENT: "save chart ${{ needs.save-result.outputs.chart-pkg-name }} ${{ needs.save-result.outputs.save-result }}"
      BOT_TYPE: "${{ inputs.BOT_TYPE }}"
      BOT_WEBHOOK: "${{ inputs.BOT_WEBHOOK }}"
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit

  send-message-air-gap:
    needs: [ save-result ]
    if: ${{ always() && needs.save-result.outputs.air-gap-tool-pkg-name != '' }}
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "2"
      CONTENT: "save tool ${{ needs.save-result.outputs.air-gap-tool-pkg-name }} ${{ needs.save-result.outputs.save-air-gap-tool-result }}"
      BOT_TYPE: "${{ inputs.BOT_TYPE }}"
      BOT_WEBHOOK: "${{ inputs.BOT_WEBHOOK }}"
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit
