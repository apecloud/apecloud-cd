name: Kbcli Test on K8S

on:
  workflow_dispatch:
    inputs:
      CLOUD_PROVIDER:
        description: 'cloud k8s cluster provider (e.g. vke/eks/gke/aks)'
        required: false
        default: 'eks'
      KB_VERSION:
        description: 'kubeblocks release version'
        required: false
        default: 'latest'
      KB_PRE_VERSION:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      TEST_TYPE:
        description: 'test type (e.g. apecloud-mysql|postgresql|redis|mongodb|kafka|pulsar|mysqlscale|weaviate|qdrant|smartengine|
        greptimedb|nebula|risingwave|starrocks|etcd|oceanbase|foxlake|orioledb|official-pg|asmysql|openldap|
        polardbx|opensearch|elasticsearch|vllm|tdengine|milvus|clickhouse|pika|ggml|zookeeper|mariadb|tidb|xinference|
        oracle|opengauss|influxdb|flink|solr|mogdb|oceanbase-ent|starrocks-ent|apecloud-postgresql|yashandb|
        redis-cluster|camellia-redis-proxy|dmdb|minio|orchestrator|rabbitmq|damengdb|kingbase)'
        type: string
        required: false
        default: ''
      CLUSTER_VERSION:
        description: 'k8s cluster version (e.g. 1.28)'
        required: false
        default: '1.28'
      REGION:
        description: 'k8s region name'
        required: false
        default: 'cn-shanghai'
      INSTANCE_TYPE:
        description: 'node instance types (e.g. amd64/arm64)'
        required: false
        default: 'amd64'
      BRANCH_NAME:
        description: 'testinfra branch name'
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        required: false
        default: 'main'
      ARGS:
        description: "Test args"
        required: false
        default: ''
  workflow_call:
    inputs:
      CLOUD_PROVIDER:
        description: 'cloud k8s cluster provider'
        type: string
        required: false
        default: 'eks'
      KB_VERSION:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: 'latest'
      KB_PRE_VERSION:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      TEST_TYPE:
        description: 'test type'
        type: string
        required: false
        default: ''
      CLUSTER_VERSION:
        description: 'k8s cluster version'
        type: string
        required: false
        default: '1.28'
      REGION:
        description: 'k8s region name'
        type: string
        required: false
        default: 'cn-shanghai'
      INSTANCE_TYPE:
        description: 'node instance types'
        type: string
        required: false
        default: 'amd64'
      BRANCH_NAME:
        description: 'testinfra branch name'
        type: string
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      ARGS:
        description: "Test args"
        type: string
        required: false
        default: ''

run-name: kbcli:${{ inputs.KB_PRE_VERSION }} to ${{ inputs.KB_VERSION }} ${{ inputs.CLOUD_PROVIDER }}:${{ inputs.CLUSTER_VERSION }}:${{ inputs.INSTANCE_TYPE }} ${{ inputs.TEST_TYPE }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  PYTHON_VERSION: "3.11"
  OSS_KEY_ID: ${{ secrets.OSS_KEY_ID }}
  OSS_KEY_SECRET: ${{ secrets.OSS_KEY_SECRET }}
  OSS_ENDPOINT: "oss-cn-zhangjiakou.aliyuncs.com"
  OSS_BUCKET: "kubeblocks-oss"

permissions:
  id-token: write
  contents: read

jobs:
  test-playground:
    if: ${{ inputs.TEST_TYPE == '' && inputs.KB_PRE_VERSION == '' && inputs.CLOUD_PROVIDER != 'vke' }}
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      test-type: "4"
      test-type-name: "playground"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  terraform-init-k8s:
    uses: ./.github/workflows/terraform-init.yml
    with:
      test-type: ${{ inputs.TEST_TYPE }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      cluster-version: ${{ inputs.CLUSTER_VERSION }}
      instance-type: ${{ inputs.INSTANCE_TYPE }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      region: ${{ inputs.REGION }}
      kb-version: "${{ inputs.KB_VERSION }}"
    secrets: inherit

  test-kubeblocks:
    if: ${{ needs.terraform-init-k8s.result == 'success' }}
    needs: terraform-init-k8s
    uses: ./.github/workflows/kbcli-pre-test-k8s.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "${{ inputs.TEST_TYPE }}"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  test-apecloud-mysql:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'apecloud-mysql')) }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "apecloud-mysql"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-postgresql:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'postgresql|') || endsWith(inputs.TEST_TYPE, 'postgresql')) && ! contains(inputs.TEST_TYPE, '-postgresql') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "2"
      test-type-name: "postgresql"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-redis:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'redis|') || endsWith(inputs.TEST_TYPE, 'redis')) }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "5"
      test-type-name: "redis"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-mongodb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mongodb')) }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "6"
      test-type-name: "mongodb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-kafka:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'kafka')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "7"
      test-type-name: "kafka"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-pulsar:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'pulsar|') || endsWith(inputs.TEST_TYPE, 'pulsar')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "8"
      test-type-name: "pulsar"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-mysqlscale:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mysqlscale')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "mysqlscale"
      test-args: "--enable-proxy true ${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-weaviate:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'weaviate')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "9"
      test-type-name: "weaviate"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-qdrant:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'qdrant')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "10"
      test-type-name: "qdrant"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-smartengine:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'smartengine')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "smartengine"
      test-args: "--smartengine true ${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-greptimedb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'greptimedb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "11"
      test-type-name: "greptimedb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-nebula:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'nebula')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "12"
      test-type-name: "nebula"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-risingwave:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'risingwave')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "13"
      test-type-name: "risingwave"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-starrocks:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'starrocks|') || endsWith(inputs.TEST_TYPE, 'starrocks')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "14"
      test-type-name: "starrocks"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-etcd:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'etcd')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "15"
      test-type-name: "etcd"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-oceanbase:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'oceanbase|') || endsWith(inputs.TEST_TYPE, 'oceanbase')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "16"
      test-type-name: "oceanbase"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-foxlake:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'foxlake')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v1.0.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "17"
      test-type-name: "foxlake"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-orioledb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'orioledb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "18"
      test-type-name: "orioledb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-official-pg:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'official-pg')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "20"
      test-type-name: "official-pg"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-asmysql:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'asmysql')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "21"
      test-type-name: "asmysql"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-openldap:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'openldap')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "22"
      test-type-name: "openldap"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-polardbx:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'polardbx')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "23"
      test-type-name: "polardbx"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-opensearch:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'opensearch')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "24"
      test-type-name: "opensearch"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-elasticsearch:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'elasticsearch')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "25"
      test-type-name: "elasticsearch"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-vllm:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'vllm')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "26"
      test-type-name: "vllm"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-tdengine:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'tdengine')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "27"
      test-type-name: "tdengine"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-milvus:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'milvus')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "28"
      test-type-name: "milvus"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-clickhouse:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'clickhouse')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "29"
      test-type-name: "clickhouse"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-pika:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'pika')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "30"
      test-type-name: "pika"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-ggml:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'ggml')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "31"
      test-type-name: "ggml"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-zookeeper:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'zookeeper')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "32"
      test-type-name: "zookeeper"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-mariadb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mariadb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "33"
      test-type-name: "mariadb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-tidb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'tidb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "34"
      test-type-name: "tidb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-xinference:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'xinference')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "35"
      test-type-name: "xinference"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-oracle:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'oracle|') || endsWith(inputs.TEST_TYPE, 'oracle')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "36"
      test-type-name: "oracle"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-opengauss:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'opengauss')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "37"
      test-type-name: "opengauss"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-influxdb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'influxdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "38"
      test-type-name: "influxdb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-flink:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'flink')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "39"
      test-type-name: "flink"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-solr:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'solr')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "40"
      test-type-name: "solr"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

#  test-halo:
#    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'halo')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') && ! contains(inputs.KB_VERSION, 'v1.0.') }}
#    needs: [ terraform-init-k8s, test-kubeblocks ]
#    uses: ./.github/workflows/test-kbcli.yml
#    with:
#      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
#      region: ${{ inputs.REGION }}
#      release-version: "${{ inputs.KB_VERSION }}"
#      previous-version: "${{ inputs.KB_PRE_VERSION }}"
#      test-type: "42"
#      test-type-name: "halo"
#      test-args: "${{ inputs.ARGS }}"
#      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
#      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
#      branch-name: ${{ inputs.BRANCH_NAME }}
#      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
#    secrets: inherit

  test-mogdb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mogdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "43"
      test-type-name: "mogdb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-oceanbase-ent:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'oceanbase-ent')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "44"
      test-type-name: "oceanbase-ent"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-starrocks-ent:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'starrocks-ent')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "45"
      test-type-name: "starrocks-ent"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-apecloud-postgresql:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'apecloud-postgresql')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "46"
      test-type-name: "apecloud-postgresql"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-yashandb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'yashandb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "47"
      test-type-name: "yashandb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-redis-cluster:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'redis-cluster')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "48"
      test-type-name: "redis-cluster"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-camellia-redis-proxy:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'camellia-redis-proxy')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "49"
      test-type-name: "camellia-redis-proxy"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-dmdb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'dmdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "50"
      test-type-name: "dmdb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-minio:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'minio')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "51"
      test-type-name: "minio"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-orchestrator:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'orchestrator')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "52"
      test-type-name: "orchestrator"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-rabbitmq:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'rabbitmq')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "53"
      test-type-name: "rabbitmq"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-damengdb:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'damengdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "57"
      test-type-name: "damengdb"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  test-kingbase:
    if: ${{ needs.terraform-init-k8s.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'kingbase')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ terraform-init-k8s, test-kubeblocks ]
    uses: ./.github/workflows/test-kbcli.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "58"
      test-type-name: "kingbase"
      test-args: "${{ inputs.ARGS }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      random-suffix: ${{ needs.test-kubeblocks.outputs.random-suffix }}
    secrets: inherit

  send-message:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    outputs:
      test-date: ${{ steps.upload_test_result.outputs.test-date }}
    needs: [ test-playground, test-kubeblocks, test-apecloud-mysql, test-postgresql, test-redis,
             test-mongodb, test-kafka, test-pulsar, test-mysqlscale, test-weaviate, test-qdrant,
             test-smartengine, test-greptimedb, test-nebula, test-risingwave, test-starrocks,
             test-etcd, test-oceanbase, test-foxlake, test-asmysql,
             test-openldap, test-polardbx, test-tdengine, test-milvus, test-clickhouse,
             test-pika, test-opensearch, test-elasticsearch, test-vllm, test-orioledb,
             test-official-pg, test-ggml, test-zookeeper, test-mariadb , test-tidb,
             test-xinference, test-oracle , test-opengauss, test-influxdb, test-flink,
             test-solr, test-mogdb, test-oceanbase-ent, test-starrocks-ent,
             test-apecloud-postgresql, test-yashandb, test-redis-cluster, test-camellia-redis-proxy,
             test-dmdb, test-minio, test-orchestrator, test-rabbitmq, test-damengdb, test-kingbase ]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./
          ref: ${{ inputs.APECD_REF }}

      - name: send message
        run: |
          TEST_TYPE="${{ inputs.TEST_TYPE }}"
          cmd_head="bash .github/utils/utils.sh --type 36 --test-result "
          TEST_RESULT="playground|${{ needs.test-playground.outputs.test-result }}##install-kubeblocks|${{ needs.test-kubeblocks.outputs.test-result }}"
          if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"apecloud-mysql"* ]]; then
              TEST_RESULT="${TEST_RESULT}##apecloud-mysql|${{ needs.test-apecloud-mysql.outputs.test-result }}"
              cmd="${cmd_head} \"${{ needs.test-apecloud-mysql.outputs.test-result-report }}\" "
              eval "$cmd"
          fi
          if [[ "$TEST_TYPE" == '' || (("$TEST_TYPE" == *"postgresql|"* || "$TEST_TYPE" == *"postgresql") && "$TEST_TYPE" != *"-postgresql"* ) ]]; then
              TEST_RESULT="${TEST_RESULT}##postgresql|${{ needs.test-postgresql.outputs.test-result }}"
              cmd="${cmd_head} \"${{ needs.test-postgresql.outputs.test-result-report }}\" "
              eval "$cmd"
          fi
          if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"redis|"* || "$TEST_TYPE" == *"redis" ]]; then
              TEST_RESULT="${TEST_RESULT}##redis|${{ needs.test-redis.outputs.test-result }}"
              cmd="${cmd_head} \"${{ needs.test-redis.outputs.test-result-report }}\" "
              eval "$cmd"
          fi
          if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"mongodb"* ]]; then
              TEST_RESULT="${TEST_RESULT}##mongodb|${{ needs.test-mongodb.outputs.test-result }}"
              cmd="${cmd_head} \"${{ needs.test-mongodb.outputs.test-result-report }}\" "
              eval "$cmd"
          fi
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* ]]; then
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"kafka"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##kafka|${{ needs.test-kafka.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-kafka.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"pulsar|"* || "$TEST_TYPE" == *"pulsar" ]]; then
                  TEST_RESULT="${TEST_RESULT}##pulsar|${{ needs.test-pulsar.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-pulsar.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"mysqlscale"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mysqlscale|${{ needs.test-mysqlscale.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-mysqlscale.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"weaviate"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##weaviate|${{ needs.test-weaviate.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-weaviate.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"qdrant"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##qdrant|${{ needs.test-qdrant.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-qdrant.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"smartengine"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##smartengine|${{ needs.test-smartengine.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-smartengine.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
          fi
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* ]]; then
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"greptimedb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##greptimedb|${{ needs.test-greptimedb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-greptimedb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"nebula"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##nebula|${{ needs.test-nebula.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-nebula.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"risingwave"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##risingwave|${{ needs.test-risingwave.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-risingwave.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"starrocks|"* || "$TEST_TYPE" == *"starrocks" ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks|${{ needs.test-starrocks.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-starrocks.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"etcd"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##etcd|${{ needs.test-etcd.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-outputs.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"oceanbase|"* || "$TEST_TYPE" == *"oceanbase" ]]; then
                  TEST_RESULT="${TEST_RESULT}##oceanbase|${{ needs.test-oceanbase.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-oceanbase.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"foxlake"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##foxlake|${{ needs.test-foxlake.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-foxlake.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"asmysql"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql|${{ needs.test-asmysql.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-asmysql.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"openldap"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##openldap|${{ needs.test-openldap.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-openldap.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"polardbx"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##polardbx|${{ needs.test-polardbx.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-polardbx.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"milvus"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##milvus|${{ needs.test-milvus.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-milvus.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"clickhouse"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##clickhouse|${{ needs.test-clickhouse.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-clickhouse.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"pika"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##pika|${{ needs.test-pika.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-pika.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"opensearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opensearch|${{ needs.test-opensearch.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-opensearch.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"elasticsearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##elasticsearch|${{ needs.test-elasticsearch.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-elasticsearch.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"tdengine"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tdengine|${{ needs.test-tdengine.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-tdengine.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi   
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"vllm"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##vllm|${{ needs.test-vllm.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-vllm.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi    
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"orioledb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orioledb|${{ needs.test-orioledb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-orioledb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"official-pg"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##official-pg|${{ needs.test-official-pg.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-official-pg.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"ggml"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##ggml|${{ needs.test-ggml.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-ggml.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"zookeeper"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##zookeeper|${{ needs.test-zookeeper.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-zookeeper.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"mariadb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mariadb|${{ needs.test-mariadb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-mariadb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
          fi
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* ]]; then
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"tidb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tidb|${{ needs.test-tidb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-tidb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"xinference"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##xinference|${{ needs.test-xinference.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-xinference.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"oracle|"* || "$TEST_TYPE" == *"oracle" ]]; then
                  TEST_RESULT="${TEST_RESULT}##oracle|${{ needs.test-oracle.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-oracle.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"opengauss"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opengauss|${{ needs.test-opengauss.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-opengauss.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"influxdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##influxdb|${{ needs.test-influxdb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-influxdb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"flink"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##flink|${{ needs.test-flink.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-flink.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"mogdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mogdb|${{ needs.test-mogdb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-mogdb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"redis-cluster"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##redis-cluster|${{ needs.test-redis-cluster.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-redis-cluster.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"camellia-redis-proxy"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##camellia-redis-proxy|${{ needs.test-camellia-redis-proxy.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-camellia-redis-proxy.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
          fi 
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* && "${{ inputs.KB_VERSION }}" != "v0.8."* ]]; then
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"solr"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##solr|${{ needs.test-solr.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-solr.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"oceanbase-ent"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##oceanbase-ent|${{ needs.test-oceanbase-ent.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-oceanbase-ent.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"starrocks-ent"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks-ent|${{ needs.test-starrocks-ent.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-starrocks-ent.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"apecloud-postgresql"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##apecloud-postgresql|${{ needs.test-apecloud-postgresql.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-apecloud-postgresql.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"yashandb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##yashandb|${{ needs.test-yashandb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-yashandb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"dmdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##dmdb|${{ needs.test-dmdb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-dmdb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"minio"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##minio|${{ needs.test-minio.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-minio.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"orchestrator"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orchestrator|${{ needs.test-orchestrator.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-orchestrator.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"rabbitmq"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##rabbitmq|${{ needs.test-rabbitmq.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-rabbitmq.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"damengdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##damengdb|${{ needs.test-damengdb.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-damengdb.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
              if [[ "$TEST_TYPE" == '' || "$TEST_TYPE" == *"kingbase"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##kingbase|${{ needs.test-kingbase.outputs.test-result }}"
                  cmd="${cmd_head} \"${{ needs.test-kingbase.outputs.test-result-report }}\" "
                  eval "$cmd"
              fi 
          fi
          
          TEST_RESULT=$( bash .github/utils/utils.sh --type 12 \
              --github-repo "${{ github.repository }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          date_ret=$(date +%Y-%m-%d-%T)
          test_title="[${{ inputs.KB_VERSION }}] Test KBCLI on ${{ inputs.CLOUD_PROVIDER }}:${{ inputs.CLUSTER_VERSION }}:${{ inputs.INSTANCE_TYPE }} [${date_ret}]"
          if [[ -n "${{ inputs.KB_PRE_VERSION }}" ]]; then
              test_title="[${{ inputs.KB_PRE_VERSION }}] upgrade to "$test_title
          fi 
          echo $TEST_RESULT
          python3 .github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$test_title" \
              --result "$TEST_RESULT"

      - name: Setup ossutil
        uses: manyuanrong/setup-ossutil@v2.0
        with:
          access-key-id: "${{ env.OSS_KEY_ID }}"
          access-key-secret: "${{ env.OSS_KEY_SECRET }}"
          endpoint: "${{ env.OSS_ENDPOINT }}"

      - name: Upload test result log to oss
        id: upload_test_result
        run: |
          TEST_DATE="$(date +%Y%m%d)"
          echo test-date=${TEST_DATE} >> $GITHUB_OUTPUT
          
          KUBEBLOCKS_VERSION="${{ inputs.KB_VERSION }}"
          OSS_DIR="oss://${{ env.OSS_BUCKET }}/reports/kubeblocks/${KUBEBLOCKS_VERSION}/${TEST_DATE}"
          upload_file_name="result.log.txt"
          
          for i in $(seq 1 3); do
              ossutil cp -rf "${OSS_DIR}/${upload_file_name}" ./
              download_ret=$?
              if [[ $download_ret -eq 0 ]]; then
                  break
              fi
              sleep 1
          done
          
          test_result_report_output_file_log="test-result-report-output.log"
          if [[ -f ${test_result_report_output_file_log} ]]; then
              cat ${test_result_report_output_file_log}
              if [[ ! -f ${upload_file_name} ]]; then
                  touch ${upload_file_name}
              else
                  echo "" >> ${upload_file_name}
              fi
              cat ${test_result_report_output_file_log} >> ${upload_file_name}
          
              for i in $(seq 1 3); do
                  ossutil cp -rf "${upload_file_name}" "${OSS_DIR}/${upload_file_name}"
                  upload_ret=$?
                  if [[ $upload_ret -eq 0 ]]; then
                      echo "$(tput -T xterm setaf 2)upload ${upload_file_name} to oss successfully$(tput -T xterm sgr0)"
                      break
                  else
                      echo "$(tput -T xterm setaf 3)::warning title=upload ${upload_file_name} to oss failure$(tput -T xterm sgr0)"
                  fi
                  sleep 1
              done
          fi

  terraform-destroy-k8s:
    if: ${{ always() }}
    needs: [ terraform-init-k8s, send-message ]
    uses: ./.github/workflows/terraform-destroy.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      region: ${{ inputs.REGION }}
    secrets: inherit
    
  upload-test-report:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ send-message ]
    steps:
      - name: checkout testinfra
        uses: actions/checkout@v4
        with:
          repository: apecloud/testinfra
          ref: "${{ inputs.BRANCH_NAME }}"
          path: ./
          token: ${{ env.GITHUB_TOKEN }}

      - uses: manyuanrong/setup-ossutil@v2.0
        with:
          access-key-id: "${{ env.OSS_KEY_ID }}"
          access-key-secret: "${{ env.OSS_KEY_SECRET }}"
          endpoint: "${{ env.OSS_ENDPOINT }}"

      - name: download test result log
        run: |
          TEST_DATE=${{ needs.send-message.outputs.test-date }}
          KUBEBLOCKS_VERSION="${{ inputs.KB_VERSION }}"
          OSS_DIR="oss://${{ env.OSS_BUCKET }}/reports/kubeblocks/${KUBEBLOCKS_VERSION}/${TEST_DATE}"
          upload_file_name="result.log.txt"
          
          for i in $(seq 1 3); do
              ossutil cp -rf "${OSS_DIR}/${upload_file_name}" ./test/report/
              download_ret=$?
              if [[ $download_ret -eq 0 ]]; then
                  echo "$(tput -T xterm setaf 2)download ${upload_file_name} from oss successfully$(tput -T xterm sgr0)"
                  break
              fi
              sleep 1
          done
          
          if [[ ! -f "./test/report/${upload_file_name}" ]]; then
              echo "$(tput -T xterm setaf 1)::error title=download ${upload_file_name} from oss failure$(tput -T xterm sgr0)"
              exit 1
          fi

      - name: install wkhtmltopdf
        run: |
          sudo rm /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends wkhtmltopdf fonts-wqy-zenhei fonts-wqy-microhei

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ env.PYTHON_VERSION }}"

      - name: checkout pystan2
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          repository: stan-dev/pystan2
          ref: "v2.19.1.1"
          path: pystan2

      - name: install Cython and NumPy
        run: |
          pip3 install Cython==3.0.9 NumPy==1.24.3

      - name: install pystan 2.19.1.1
        run: |
          cd pystan2
          python3 setup.py install

      - name: install python requirements
        run: |
          cd test/report
          sed -i 's/^appscript==.*/#appscript==/' requirements.txt
          pip3 install -r requirements.txt

      - name: run report
        run: |
          cd test/report
          for i in $(seq 1 3); do
              python3 ./report.py \
                  --raw=./result.log.txt \
                  --ha_doc=./ha.md \
                  --main_doc=./main.md \
                  --upgrade_doc=./upgrade.md \
                  --main_report=./test_all.pdf \
                  --ha_report=./test_ha.pdf \
                  --upgrade_report=./test_upgrade.pdf 
              gen_ret=$?
              if [[ $gen_ret -eq 0 ]]; then
                  break
              fi
              sleep 1
          done
          
          echo "mv test reports to reports dir"
          mkdir -p reports
          mv ./test_all.pdf ./test_ha.pdf ./test_upgrade.pdf reports

      - name: Upload test reports to oss
        run: |
          TEST_DATE=${{ needs.send-message.outputs.test-date }}
          KUBEBLOCKS_VERSION="${{ inputs.KB_VERSION }}"
          OSS_DIR="oss://${{ env.OSS_BUCKET }}/reports/kubeblocks/${KUBEBLOCKS_VERSION}/${TEST_DATE}"
          
          report_file_path="./test/report/reports"
          for report_file in $(ls ${report_file_path}); do
              if [[ ! -f "${report_file_path}/${report_file}" ]]; then
                  continue
              fi
          
              for i in $(seq 1 3); do
                  ossutil cp -rf "${report_file_path}/${report_file}" "${OSS_DIR}/${report_file}"
                  upload_ret=$?
                  if [[ $upload_ret -eq 0 ]]; then
                      echo "$(tput -T xterm setaf 2)upload ${report_file} to oss successfully$(tput -T xterm sgr0)"
                      break
                  else
                      echo "$(tput -T xterm setaf 3)::warning title=upload ${report_file} to oss failure$(tput -T xterm sgr0)"
                  fi
                  sleep 1
              done
          done

      - name: checkout apecloud-cd
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./apecloud-cd
          ref: ${{ inputs.APECD_REF }}

      - name: send message
        run: |
          TEST_DATE=${{ needs.send-message.outputs.test-date }}
          KUBEBLOCKS_VERSION="${{ inputs.KB_VERSION }}"
          OSS_URL="https://${{ env.OSS_BUCKET }}.${{ env.OSS_ENDPOINT }}/reports/kubeblocks/${KUBEBLOCKS_VERSION}/${TEST_DATE}"
          test_result_file_name="result.log.txt"
          TEST_RESULT="${test_result_file_name}|${OSS_URL}/${test_result_file_name}"
          
          report_file_path="./test/report/reports"
          for report_file in $(ls ${report_file_path}); do
              if [[ ! -f "${report_file_path}/${report_file}" ]]; then
                  continue
              fi
              TEST_RESULT="${TEST_RESULT}##${report_file}|${OSS_URL}/${report_file}"
          done
          
          REPORT_BOT_WEBHOOK="${{ vars.REPORT_BOT_WEBHOOK }}"
          if [[ -z "${REPORT_BOT_WEBHOOK}" ]]; then
              REPORT_BOT_WEBHOOK="${{ vars.TEST_BOT_WEBHOOK }}"
          fi
          
          test_title="[${KUBEBLOCKS_VERSION}] Test Report on ${{ inputs.CLOUD_PROVIDER }}:${{ inputs.CLUSTER_VERSION }}:${{ inputs.INSTANCE_TYPE }} [${TEST_DATE}]"
          python3 ./apecloud-cd/.github/utils/send_mesage.py \
              --url "${REPORT_BOT_WEBHOOK}" \
              --title "$test_title" \
              --result "$TEST_RESULT" \
              --send-type "report"
