name: DEPLOY-ALIYUN-ACK

on:
  workflow_call:
    inputs:
      KUBECONFIG_NUM:
        description: "The number of ACK KUBECONFIG secret"
        type: string
        required: false
        default: ''
      MAKE_OPS:
        description: "The ops name of makefile"
        type: string
        required: false
        default: ''
      MAKE_OPS_PRE:
        description: "The pre ops name of makefile"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The tag name of image"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      GIT_CONFIG:
        description: "InsteadOf git config global url (default: false)"
        type: boolean
        required: false
        default: false
      KUBECTL_VERSION:
        description: "Install the specify version of kubectl (default: latest)"
        type: string
        required: false
        default: 'v1.28.3'
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true


env:
  ACK_KUBECONFIG: ${{ secrets.ACK_KUBECONFIG }}
  ACK_KUBECONFIG_1: ${{ secrets.ACK_KUBECONFIG_1 }}
  ACK_KUBECONFIG_2: ${{ secrets.ACK_KUBECONFIG_2 }}
  ACK_KUBECONFIG_3: ${{ secrets.ACK_KUBECONFIG_3 }}
  ACK_KUBECONFIG_4: ${{ secrets.ACK_KUBECONFIG_4 }}
  ACK_KUBECONFIG_5: ${{ secrets.ACK_KUBECONFIG_5 }}
  GITHUB_USER: ${{ secrets.PERSONAL_ACCESS_USER }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  CONTROLLER_MANAGER_CFG: ${{ secrets.CONTROLLER_MANAGER_CFG }}
  OPENCONSOLE_CFG: ${{ secrets.OPENCONSOLE_CFG }}
  DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}


jobs:
  deploy-aliyun-ack:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      tag-name: ${{ steps.get_tag_name.outputs.TAG-NAME }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - uses: azure/setup-kubectl@v3
        with:
          version: "${{ inputs.KUBECTL_VERSION }}"

      - name: git config
        if: inputs.GIT_CONFIG
        run: |
          git config --global url."https://${{ env.GITHUB_USER }}:${{ env.GITHUB_TOKEN }}@github.com".insteadof "https://github.com"

      - name: remove v prefix
        id: get_tag_name
        shell: bash
        run: |
          tag_name="${{ inputs.VERSION }}"
          if [[ "$tag_name" == "v"* && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              tag_name="${tag_name/v/}"
          fi
          echo TAG-NAME=$tag_name >> $GITHUB_OUTPUT

      - name: Configure ACK Context ${{ inputs.KUBECONFIG_NUM }}
        run: |
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          KUBECONFIG_NUM="${{ inputs.KUBECONFIG_NUM }}"
          case "$KUBECONFIG_NUM" in
              1)
                  echo '${{ env.ACK_KUBECONFIG_1 }}' > $HOME/.kube/config
              ;;
              2)
                  echo '${{ env.ACK_KUBECONFIG_2 }}' > $HOME/.kube/config
              ;;
              3)
                  echo '${{ env.ACK_KUBECONFIG_3 }}' > $HOME/.kube/config
              ;;
              4)
                  echo '${{ env.ACK_KUBECONFIG_4 }}' > $HOME/.kube/config
              ;;
              5)
                  echo '${{ env.ACK_KUBECONFIG_5 }}' > $HOME/.kube/config
              ;;
              *)
                  echo '${{ env.ACK_KUBECONFIG }}' > $HOME/.kube/config
              ;;
          esac

      - name: make pre
        if: inputs.MAKE_OPS_PRE
        run: |
          make ${{ inputs.MAKE_OPS_PRE }}

      - name: deploy to aliyun ack
        if: inputs.MAKE_OPS
        run: |
          cmd="make ${{ inputs.MAKE_OPS }} "

          if [[ ! -z "${{ inputs.VERSION }}" ]]; then
            cmd=$cmd"VERSION=${{ steps.get_tag_name.outputs.TAG-NAME }} "
          fi

          eval "$cmd"
