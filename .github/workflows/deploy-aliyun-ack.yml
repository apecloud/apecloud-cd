name: Deploy Cloud Release

on:
  workflow_call:
    inputs:
      CLOUD_ENV_NAME:
        description: "The cloud env name of deploy "
        type: string
        required: false
        default: ''
      MAKE_OPS:
        description: "The ops name of makefile"
        type: string
        required: false
        default: ''
      MAKE_OPS_PRE:
        description: "The pre ops name of makefile"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The tag name of image"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      GIT_CONFIG:
        description: "InsteadOf git config global url (default: false)"
        type: boolean
        required: false
        default: false
      KUBECTL_VERSION:
        description: "Install the specify version of kubectl (default: latest)"
        type: string
        required: false
        default: 'v1.28.3'
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'


env:
  ACK_KUBECONFIG_DEV: ${{ secrets.ACK_KUBECONFIG_DEV }}
  ACK_KUBECONFIG_DEMO: ${{ secrets.ACK_KUBECONFIG_DEMO }}
  IDC_KUBECONFIG_1: ${{ secrets.IDC_KUBECONFIG_1 }}
  IDC_KUBECONFIG_2: ${{ secrets.IDC_KUBECONFIG_2 }}
  IDC_KUBECONFIG_4: ${{ secrets.IDC_KUBECONFIG_4 }}
  ACK_KUBECONFIG_PROD: ${{ secrets.ACK_KUBECONFIG_PROD }}
  ACK_KUBECONFIG_INTL_PROD: ${{ secrets.ACK_KUBECONFIG_INTL_PROD }}
  VKE_KUBECONFIG_TEST: ${{ secrets.VKE_KUBECONFIG_TEST }}
  GITHUB_USER: ${{ secrets.PERSONAL_ACCESS_USER }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  CLOUD_ENV_NAME: ${{ inputs.CLOUD_ENV_NAME }}
  RELEASE_VERSION: ${{ inputs.VERSION }}
  DEPLOY_RESULT: 0
  HELM_VERSION: "v3.16.3"
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  JIHULAB_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}


jobs:
  deploy-aliyun-ack:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      tag-name: ${{ steps.get_tag_name.outputs.tag_name }}
      cloud-env-name: ${{ steps.cloud_env.outputs.cloud_env_name }}
      content-result: ${{ steps.deploy_result.outputs.content_result }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Checkout apecloud-values Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-values
          path: apecloud-values
          ref: ${{ github.ref }}
          token: ${{ env.GITHUB_TOKEN }}

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - uses: azure/setup-kubectl@v3
        with:
          version: "${{ inputs.KUBECTL_VERSION }}"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: git config
        if: inputs.GIT_CONFIG
        run: |
          git config --global url."https://${{ env.GITHUB_USER }}:${{ env.GITHUB_TOKEN }}@github.com".insteadof "https://github.com"

      - name: remove v prefix
        id: get_tag_name
        shell: bash
        run: |
          tag_name="${{ inputs.VERSION }}"
          if [[ "$tag_name" == "v"* && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              tag_name="${tag_name/v/}"
          fi
          echo tag_name=$tag_name >> $GITHUB_OUTPUT

      - name: Configure ACK Context ${{ inputs.CLOUD_ENV_NAME }}
        id: cloud_env
        run: |
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          CLOUD_ENV_NAME="${{ inputs.CLOUD_ENV_NAME }}"
          echo 'CLOUD_ENV_NAME='${CLOUD_ENV_NAME} >> $GITHUB_ENV
          echo 'cloud_env_name='${CLOUD_ENV_NAME} >> $GITHUB_OUTPUT
          CHART_VALUES_FILENAME="./kb_cloud_chart_values.yaml"
          case "$CLOUD_ENV_NAME" in
              dev)
                  echo '${{ env.ACK_KUBECONFIG_DEV }}' > $HOME/.kube/config
                  cp -r apecloud-values/dev/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              demo)
                  echo '${{ env.ACK_KUBECONFIG_DEMO }}' > $HOME/.kube/config
                  cp -r apecloud-values/demo/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              idc1)
                  echo '${{ env.IDC_KUBECONFIG_1 }}' > $HOME/.kube/config
                  cp -r apecloud-values/idc1/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              idc2)
                  echo '${{ env.IDC_KUBECONFIG_2 }}' > $HOME/.kube/config
                  cp -r apecloud-values/idc2/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              idc4)
                  echo '${{ env.IDC_KUBECONFIG_4 }}' > $HOME/.kube/config
                  cp -r apecloud-values/idc4/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              prod)
                  echo '${{ env.ACK_KUBECONFIG_PROD }}' > $HOME/.kube/config
                  cp -r apecloud-values/prod-cn/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              intl_prod)
                  echo '${{ env.ACK_KUBECONFIG_INTL_PROD }}' > $HOME/.kube/config
                  cp -r apecloud-values/prod-us/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              vke_test)
                  echo '${{ env.VKE_KUBECONFIG_TEST }}' > $HOME/.kube/config
                  cp -r apecloud-values/vke-test/values.yaml ${CHART_VALUES_FILENAME}
              ;;
              *)
                  echo '${{ env.ACK_KUBECONFIG }}' > $HOME/.kube/config
              ;;
          esac

      - name: make pre
        if: inputs.MAKE_OPS_PRE
        run: |
          make ${{ inputs.MAKE_OPS_PRE }}

      - name: deploy to aliyun ack
        if: inputs.MAKE_OPS
        run: |
          cmd="make ${{ inputs.MAKE_OPS }} "

          if [[ -n "${{ inputs.VERSION }}" ]]; then
            cmd=$cmd"VERSION=${{ steps.get_tag_name.outputs.tag_name }} "
          fi

          eval "$cmd"
          deploy_ret=$?
          if [[ $deploy_ret -eq 0 ]]; then
              echo DEPLOY_RESULT=1 >> $GITHUB_ENV
          fi

      - name: deploy result
        if: ${{ always() }}
        id: deploy_result
        run: |
          CONTENT="error"
          if [[ "${DEPLOY_RESULT}" == "1" ]]; then
              CONTENT="success"
          fi
          echo 'content_result='$CONTENT >> $GITHUB_OUTPUT

  send-message:
    needs: [ deploy-aliyun-ack ]
    if: ${{ always() }}
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "2"
      CONTENT: "deploy ${{ needs.deploy-aliyun-ack.outputs.cloud-env-name }} release ${{ needs.deploy-aliyun-ack.outputs.tag-name }} ${{ needs.deploy-aliyun-ack.outputs.content-result }}"
      WAIT_TIME: 60
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit
