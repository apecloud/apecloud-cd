name: TEST-KBCLI

on:
  workflow_call:
    inputs:
      cloud-provider:
        description: 'cloud k8s cluster provider (e.g. eks/gke/aks)'
        type: string
        required: false
        default: 'eks'
      release-version:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: 'latest'
      previous-version:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      branch-name:
        description: 'testinfra branch name'
        type: string
        required: false
        default: 'main'
      test-type:
        description: 'test type (0:install 1:mysql 2:postgresql 5:redis 6:mongodb)'
        type: string
        required: false
        default: '0'
      test-type-name:
        description: 'test type name (0:install 1:mysql 2:postgresql 5:redis 6:mongodb)'
        type: string
        required: false
        default: 'install'
      test-args:
        description: 'test args'
        type: string
        required: false
        default: ''
      region:
        description: 'k8s region name'
        type: string
        required: false
        default: ''
      k8s-cluster-name:
        description: 'k8s cluster name'
        type: string
        required: false
        default: ''
      random-suffix:
        description: 'cluster random suffix'
        type: string
        required: false
        default: ''
      test-mode:
        description: 'test mode'
        type: string
        required: false
        default: ''
      cluster-test-type:
        description: 'cluster test type'
        type: string
        required: false
        default: ''
    outputs:
      test-result:
        description: "test result"
        value: ${{ jobs.kbcli-test.outputs.test-result }}
      random-suffix:
        description: "random suffix"
        value: ${{ jobs.kbcli-test.outputs.random-suffix }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  HELM_VERSION: v3.13.1
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  JIHULAB_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}


permissions:
  id-token: write
  contents: read

jobs:
  kbcli-test:
    name: test ${{ inputs.test-type-name }}
    runs-on: ubuntu-latest
    outputs:
      test-result: ${{ steps.kbcli_test.outputs.test-result }}
      random-suffix: ${{ steps.kbcli_test.outputs.random-suffix }}
    steps:
      - name: checkout testinfra
        uses: actions/checkout@v4
        with:
          repository: apecloud/testinfra
          ref: ${{ inputs.branch-name }}
          path: ./
          token: ${{ env.GITHUB_TOKEN }}

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.3"

      - uses: aws-actions/setup-sam@v2
        if: ${{ inputs.cloud-provider == 'eks' }}
        with:
          use-installer: true

      - uses: aws-actions/configure-aws-credentials@v4
        if: ${{ inputs.cloud-provider == 'eks' && env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ inputs.region }}"

      - if: ${{ inputs.cloud-provider == 'gke' && env.GOOGLE_CREDENTIALS != '' }}
        id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GOOGLE_CREDENTIALS }}'

      - name: Setup gcloud
        if: ${{ inputs.cloud-provider == 'gke' }}
        uses: google-github-actions/setup-gcloud@v1

      - name: setup gke-gcloud-auth-plugin
        if: ${{ inputs.cloud-provider == 'gke' }}
        uses: simenandre/setup-gke-gcloud-auth-plugin@v1

      - name: get gke credential
        if: ${{ inputs.cloud-provider == 'gke' && inputs.k8s-cluster-name != '' && inputs.region != '' }}
        run: |
          gcloud container clusters get-credentials ${{ inputs.k8s-cluster-name }} \
              --zone ${{ inputs.region }} \
              --project ${{ vars.GOOGLE_PROJECT }}

      - if: ${{ inputs.cloud-provider == 'aks' && env.AZURE_CREDENTIALS != '' }}
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - if: ${{ inputs.cloud-provider == 'aks' && env.AZURE_CREDENTIALS != '' }}
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ inputs.k8s-cluster-name }}-group'
          cluster-name: '${{ inputs.k8s-cluster-name }}'

      - name: run test ${{ inputs.test-type-name }}
        id: kbcli_test
        run: |
          file_log="$(date +%Y-%m-%d-%T)".log
          touch ${file_log}
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> ${file_log}
          echo 'FILE_LOG='${file_log} >> $GITHUB_ENV
          
          KB_VERSION=$( bash .github/utils/get_kb_latest_version.sh \
              ${{ inputs.release-version }} )
          
          PREVIOUS_VERSION="${{ inputs.previous-version }}"
          PREVIOUS_VERSION="${PREVIOUS_VERSION/v/}"
          
          S3_PATH=$( bash ${{ github.workspace }}/.github/utils/utils.sh \
              --type 2 --test-type ${{ inputs.test-type-name }} \
              --kubeblocks-version ${KB_VERSION} )
          mkdir -p ${S3_PATH}
          echo 'S3_PATH='${S3_PATH} >> $GITHUB_ENV
          
          echo "k8s-cluster-name:${{ inputs.k8s-cluster-name }}"
          cmd="bash .github/utils/kbcli-test.sh "
          cmd="${cmd} --type '${{ inputs.test-type }}' "
          
          if [[ -n "${KB_VERSION}" ]]; then
              cmd="${cmd} --kubeblocks-version '${KB_VERSION}' "
          fi
          
          if [[ -n "${PREVIOUS_VERSION}" ]]; then
              cmd="${cmd} --previous-version '${PREVIOUS_VERSION}' "
          fi
          
          if [[ -n "${{ inputs.random-suffix }}" ]]; then
              cmd="${cmd} --random-suffix '${{ inputs.random-suffix }}' "
          fi
          
          if [[ -n "${{ inputs.region }}" ]]; then
              cmd="${cmd} --region '${{ inputs.region }}' "
          fi
          
          if [[ -n "${{ inputs.cloud-provider }}" ]]; then
              cmd="${cmd} --cloud-provider  '${{ inputs.cloud-provider }}' "
          fi
          
          if [[ -n "${{ inputs.test-mode }}" ]]; then
              cmd="${cmd} --test-mode '${{ inputs.test-mode }}' "
          fi
          
          if [[ -n "${{ inputs.k8s-cluster-name }}" ]]; then
              cmd="${cmd} --cluster-name '${{ inputs.k8s-cluster-name }}' "
          fi
          
          if [[ -n "${{ inputs.cluster-test-type }}" ]]; then
              cmd="${cmd} --test-type '${{ inputs.cluster-test-type }}' "
          fi
          
          if [[ -n "${{ env.AWS_ACCESS_KEY_ID }}" && -n "${{ env.AWS_SECRET_ACCESS_KEY }}" ]]; then
              if [[ "${KB_VERSION}" != "0.5."* && "${KB_VERSION}" != "0.6."* && "${KB_VERSION}" != "0.7."* && "${KB_VERSION}" != "0.8."* && -n "${{ env.JIHULAB_ACCESS_TOKEN }}" ]]; then
                  cmd="${cmd} --args '${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }} --jihulab-token ${{ env.JIHULAB_ACCESS_TOKEN }}' "
              else
                  cmd="${cmd} --args '${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }}' "
              fi
          else
              if [[ "${KB_VERSION}" != "0.5."* && "${KB_VERSION}" != "0.6."* && "${KB_VERSION}" != "0.7."* && "${KB_VERSION}" != "0.8."* && -n "${{ env.JIHULAB_ACCESS_TOKEN }}" ]]; then
                  cmd="${cmd} --args '${{ inputs.test-args }} --jihulab-token ${{ env.JIHULAB_ACCESS_TOKEN }}' "
              else
                  cmd="${cmd} --args '${{ inputs.test-args }}' "
              fi
          fi
          echo "$cmd"
          eval "$cmd" | tee -a ${file_log}
          
          RANDOM_SUFFIX=""
          if [[ "${{ inputs.test-type }}" == "0" ]]; then
              if [[ -n "${{ inputs.random-suffix }}" ]]; then
                  RANDOM_SUFFIX="${{ inputs.random-suffix }}"
              else
                  RANDOM_SUFFIX="$( grep "[RANDOM-SUFFIX]" ${file_log}|| true )"
                  RANDOM_SUFFIX=${RANDOM_SUFFIX#*"[RANDOM-SUFFIX]"}      
                  RANDOM_SUFFIX=${RANDOM_SUFFIX%"[RANDOM-SUFFIX]"*}
              fi
          fi
          echo random-suffix=$RANDOM_SUFFIX >> $GITHUB_OUTPUT
          
          test_ret="$( grep "【FAILED】" ${file_log} || true )"
          if [[ -n "$test_ret" ]]; then
              echo test-result=[FAILED] >> $GITHUB_OUTPUT
              exit 1
          else
              echo test-result=[PASSED] >> $GITHUB_OUTPUT
          fi