name: Update Release Notes

on:
  workflow_call:
    inputs:
      VERSION:
        description: 'The version of update release notes'
        required: true
        type: string
        default: ''

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  UPDATE_SCRIPT: ".github/scripts/update_release_notes.py"

jobs:
  check-stable-version:
    if: ${{ startsWith(github.ref_name, 'release-') }}
    runs-on: ubuntu-latest
    outputs:
      stable-release: ${{ steps.check_stable_version.outputs.stable-release }}
    steps:
      - name: check stable version
        id: check_stable_version
        run: |
          RELEASE_VERSION="${{ inputs.VERSION }}"
          STABLE_RELEASE=0
          if [[ "${RELEASE_VERSION}" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
              STABLE_RELEASE=1
          fi
          echo stable-release="$STABLE_RELEASE" >> $GITHUB_OUTPUT

  update-release-notes:
    needs: [ check-stable-version ]
    if: ${{ needs.check-stable-version.outputs.stable-release == '1' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: check addon stable versions
        run: |
          GIT_BRANCH="${{ github.ref_name }}"
          RELEASE_VERSION="${{ inputs.VERSION }}"
          UPDATE_SCRIPT="${{ env.UPDATE_SCRIPT }}"
          if [[ -f "${UPDATE_SCRIPT}" ]]; then
              check_file_log="check_addon_stable_versions.log"
              touch ${check_file_log} 
              python3 ${UPDATE_SCRIPT} \
                --git-branch "${GIT_BRANCH}" \
                --git-tag "${RELEASE_VERSION}" \
                --dry-run | tee -a ${check_file_log}
              NO_STABLE_VERSION=$(cat "${check_file_log}" | (egrep "No stable addon versions found|Pre-release Versions" || true))
              if [[ -n "${NO_STABLE_VERSION}" ]]; then
                  echo "$(tput -T xterm setaf 1)ERROR: No stable addon versions found!$(tput -T xterm sgr0)"
                  exit 1
              fi
          else
              echo "$(tput -T xterm setaf 1)ERROR: ${UPDATE_SCRIPT} not found!$(tput -T xterm sgr0)"
              exit 1
          fi

      - name: update release notes
        id: update-release-notes
        run: |
          GIT_BRANCH="${{ github.ref_name }}"
          RELEASE_VERSION="${{ inputs.VERSION }}"
          UPDATE_SCRIPT="${{ env.UPDATE_SCRIPT }}"
          python3 ${UPDATE_SCRIPT} \
              --git-branch "${GIT_BRANCH}" \
              --git-tag "${RELEASE_VERSION}"
          
          git add ${{ github.workspace }}/addons/*/releases_notes.yaml ${{ github.workspace }}/addons-cluster/*/releases_notes.yaml
          FILE_CHANGES=`git diff --name-only ${{ github.sha }}`
          if [[ ! -z "$FILE_CHANGES" ]]; then
              echo $FILE_CHANGES
              git config --local user.name "$GITHUB_ACTOR"
              git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
              git commit -a -m "chore: auto update release notes for ${RELEASE_VERSION}"
          fi
          echo file_changes=$FILE_CHANGES >> $GITHUB_OUTPUT

      - name: Push release notes changes
        uses: ad-m/github-push-action@master
        if: ${{ steps.update-release-notes.outputs.file_changes }}
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  send-message-version-check:
    needs: [ check-stable-version, update-release-notes ]
    if: ${{ (failure() || cancelled()) && needs.check-stable-version.outputs.stable-release == '1' }}
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "2"
      CONTENT: "update ${{ github.repository }} release-notes ${{ inputs.VERSION }} error"
    secrets: inherit
