name: Release Chart Jihu Enterprise

on:
  workflow_call:
    inputs:
      GITHUB_REPO:
        description: "The github repo to release chart"
        type: string
        required: false
        default: ''
      GITHUB_REF:
        description: "The github repo ref to release chart"
        type: string
        required: false
        default: 'main'
      MAKE_OPS:
        description: "The ops name of makefile (e.g. bump-chart-ver)"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      APP_VERSION:
        description: "The app version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      CHART_DIR:
        description: "The package dir of helm chart (default: deploy)"
        type: string
        required: false
        default: 'deploy'
      DEP_REPO:
        description: "The dependency of helm chart (e.g. helm repo add grafana https://grafana.github.io/helm-charts)"
        type: string
        required: false
        default: ''
      PUSH_ENABLE:
        description: "Enable push helm chart"
        type: boolean
        required: false
        default: true
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true
      SPECIFY_CHART:
        description: "Only package the specify sub dir chart (default: helm)"
        type: string
        required: false
        default: ''
      MAKE_OPS_POST:
        description: "The post ops name of makefile"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      SET_REGISTRY:
        description: "Enable set registry and repository"
        type: boolean
        required: false
        default: false


env:
  CR_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  HELM_VERSION: v3.15.4
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  JIHULAB_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}
  PROJECT_ID: 165897

jobs:
  release-chart:
    name: ${{ inputs.CHART_DIR }} ${{ inputs.SPECIFY_CHART }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - name: Checkout Code
        if: ${{ inputs.GITHUB_REPO == '' }}
        uses: actions/checkout@v4

      - name: Checkout ${{ inputs.GITHUB_REPO }} Code
        if: ${{ inputs.GITHUB_REPO != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.GITHUB_REPO }}
          path: ./
          token: ${{ env.CR_TOKEN }}
          ref: ${{ inputs.GITHUB_REF }}

      - name: Fetch History And Configure Git
        run: |
          git fetch --prune --unshallow
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          token: ${{ env.CR_TOKEN }}
          ref: ${{ inputs.APECD_REF }}

      - name: Update Dependency
        if: inputs.DEP_REPO
        run: |
          bash apecloud-cd/.github/utils/utils.sh --type 13 \
              --chart-path "${{ inputs.DEP_REPO }}"

      - name: remove v prefix
        id: get_version
        shell: bash
        run: |
          version="${{ inputs.VERSION }}"
          app_version="${{ inputs.APP_VERSION }}"
          if [[ "$version" == "v"*  && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              version="${version/v/}"
              app_version="${app_version/v/}"
          fi
          echo VERSION=$version >> $GITHUB_OUTPUT
          echo APP_VERSION=$app_version >> $GITHUB_OUTPUT

      - name: Bump helm chart version
        if: inputs.MAKE_OPS
        run: |
          make ${{ inputs.MAKE_OPS }} \
            VERSION="${{ steps.get_version.outputs.VERSION }}"

      - name: Set registry and repository
        if: ${{ inputs.SET_REGISTRY || inputs.CHART_DIR == 'addons' }}
        run: |
          # set addons chart registry to apecloud and repogistory to aliyun
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/set_registry_and_repo.sh \
            "apecloud-registry.cn-zhangjiakou.cr.aliyuncs.com" "${{ inputs.CHART_DIR }}"

      - name: update chart notes release info
        if: ${{ inputs.CHART_DIR == 'addons' || inputs.CHART_DIR == 'addons-cluster' }}
        run: |
          REF_NAME="${{ github.ref_name }}"
          IS_ERTERPRISE="false"
          GITHUB_REPO="${{ inputs.GITHUB_REPO }}"
          if [[ -n "${GITHUB_REPO}" ]]; then
              REF_NAME="${{ inputs.GITHUB_REF }}"
          else
              GITHUB_REPO="${{ github.repository }}"
          fi
          
          if [[ "${GITHUB_REPO}" == *"apecloud/apecloud-addons"* ]]; then
              IS_ERTERPRISE="true"
          fi
          
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/update_chart_notes.sh \
              --base-notes "apecloud-cd/chart-values/release-notes.txt" \
              --chart-dir "${{ inputs.CHART_DIR }}" \
              --ref-name "${REF_NAME}" \
              --is-ent "${IS_ERTERPRISE}"

      - name: Package Helm Chart
        shell: bash
        run: |
          CHART_DIR="${{ inputs.CHART_DIR }}"
          CHART_DIR="${CHART_DIR%/*}"
          args=()
          if [[ -n "$CHART_DIR" ]]; then
              args+=(--charts-dir "$CHART_DIR" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.VERSION }}" ]]; then
              args+=(--release-version "${{ steps.get_version.outputs.VERSION }}" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.APP_VERSION }}" ]]; then
              args+=(--app-version "${{ steps.get_version.outputs.APP_VERSION }}" )
          fi
          
          if [[ -n "${{ inputs.SPECIFY_CHART }}" ]]; then
              args+=(--specify-chart "${{ inputs.SPECIFY_CHART }}" )
          fi
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_package.sh" "${args[@]}"

      - name: helm lint
        run: |
          for chart in $(echo "$(ls .cr-release-packages)"); do
              echo "helm lint $chart"
              helm lint .cr-release-packages/$chart
          done

      - name: make post
        if: inputs.MAKE_OPS_POST
        run: |
          make ${{ inputs.MAKE_OPS_POST }}

      - name: Upload Helm Charts to Jihulab
        if: inputs.PUSH_ENABLE
        run: |
          ls .cr-release-packages
          cd .cr-release-packages
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/release_gitlab.sh \
            --type 3  \
            --asset-path ./ \
            --access-token "${{ env.JIHULAB_ACCESS_TOKEN }}" \
            --access-user "${{ env.JIHULAB_ACCESS_USER }}"\
            --project-id "${{ env.PROJECT_ID }}"
