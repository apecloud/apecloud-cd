name: TEST-KBCLI-K3S

on:
  workflow_call:
    inputs:
      release-version:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: 'latest'
      previous-version:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      branch-name:
        description: 'testinfra branch name'
        type: string
        required: false
        default: 'main'
      test-type:
        description: 'test type (0:install 1:mysql 2:postgresql 5:redis 6:mongodb)'
        type: string
        required: false
        default: '0'
      test-type-name:
        description: 'test type name (0:install 1:mysql 2:postgresql 5:redis 6:mongodb)'
        type: string
        required: false
        default: 'install'
      test-args:
        description: 'test args'
        type: string
        required: false
        default: ''
      k3s-version:
        description: 'k3s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      cloud-provider:
        description: 'cloud k8s cluster provider (e.g. vke/eks/gke/aks)'
        type: string
        required: false
        default: 'eks'        
    outputs:
      pre-test-result:
        description: "pre test result"
        value: "${{ jobs.kbcli-test-k3s.outputs.pre-test-result }}"
      test-result:
        description: "test result"
        value: "${{ jobs.kbcli-test-k3s.outputs.test-result }}"

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
  HELM_VERSION: "v3.16.3"
  K3D_NAME: default
  REGION: us-central1
  AWS_REGION: "ap-northeast-1"
  AWS_CLUSTER: "foxlake-dev-001"
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}

permissions:
  id-token: write
  contents: read

jobs:
  kbcli-test-k3s:
    name: test ${{ inputs.test-type-name }}
    runs-on: [ self-hosted, eks-k3d-runner ]
    outputs:
      test-result: ${{ steps.kbcli_test_k3s.outputs.test-result }}
      pre-test-result: ${{ steps.kbcli_test_k3s.outputs.pre-test-result }}
      runner-name: ${{ steps.get_runner_name.outputs.runner-name }}
    steps:
      - name: checkout testinfra
        uses: actions/checkout@v4
        with:
          repository: apecloud/testinfra
          ref: ${{ inputs.branch-name }}
          path: ./
          token: ${{ env.GITHUB_TOKEN }}

      - name: Checkout kubeblocks-addons Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/kubeblocks-addons
          path: kubeblocks-addons
          token:  ${{ env.GITHUB_TOKEN }}

      - name: setup k3d k3s
        uses: apecloud-inc/setup-k3d-k3s@v1
        with:
          k3d-name: "${{ env.K3D_NAME }}"
          version: "v${{ inputs.k3s-version }}"
          github-token: ${{ env.GITHUB_TOKEN }}
          k3d-args: --no-lb --k3s-node-label topology.hostpath.csi/node=k3d-${{ env.K3D_NAME }}-server-0@server:0

      - name: run test ${{ inputs.test-type-name }}
        id: kbcli_test_k3s
        run: |
          kbcli_path="/usr/local/bin/kbcli"
          if [[ -f "${kbcli_path}" ]]; then
              sudo rm -rf ${kbcli_path}
          fi
          if [[ -d kubeblocks-addons/examples ]]; then
              cp -r kubeblocks-addons/examples ./
          fi 
          KB_VERSION=$( bash .github/utils/get_kb_latest_version.sh \
              ${{ inputs.release-version }} )
          
          PREVIOUS_VERSION="${{ inputs.previous-version }}"
          PREVIOUS_VERSION="${PREVIOUS_VERSION/v/}"
          
          export TZ='Asia/Shanghai'
          rand_suffix=""
          if [[ -n "${PREVIOUS_VERSION}" ]]; then
              file_log_pre_install="$(date +%Y-%m-%d-%T)".log
              touch ${file_log_pre_install}
              bash .github/utils/kbcli-pre-test.sh \
                  --type "0" \
                  --kubeblocks-version "${PREVIOUS_VERSION}" \
                  --cloud-provider "k3s" \
                  --args "${{ inputs.test-args }} --enable-csi-hostpath-driver false --enable-addon kubebench --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }} " \
                  --region "${{ env.REGION }}" | tee -a ${file_log_pre_install}
              
              rand_suffix_tmp="$( grep "\[RANDOM-SUFFIX\]" ${file_log_pre_install} || true )"
              if [[ -n "$rand_suffix_tmp" && "$rand_suffix_tmp" == *"[RANDOM-SUFFIX]"* ]]; then
                  rand_suffix=${rand_suffix_tmp#*"[RANDOM-SUFFIX]"}      
                  rand_suffix=${rand_suffix%"[RANDOM-SUFFIX]"*}
              fi
              rm -rf ${file_log_pre_install}
          
              file_log_pre="$(date +%Y-%m-%d-%T)".log
              touch ${file_log_pre}
              if [[ "${PREVIOUS_VERSION}" != "0.5."* && "${PREVIOUS_VERSION}" != "0.6."* && "${PREVIOUS_VERSION}" != "0.7."* && "${PREVIOUS_VERSION}" != "0.8."* && -n "${{ env.JIHULAB_ACCESS_TOKEN }}" ]]; then
                  bash .github/utils/kbcli-pre-test.sh \
                      --type "${{ inputs.test-type }}" \
                      --kubeblocks-version "${PREVIOUS_VERSION}" \
                      --args "${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }} --jihulab-token ${{ env.JIHULAB_ACCESS_TOKEN }} " \
                      --region "${{ env.REGION }}" \
                      --random-suffix "${rand_suffix}" | tee -a ${file_log_pre}
              else
                  bash .github/utils/kbcli-pre-test.sh \
                      --type "${{ inputs.test-type }}" \
                      --kubeblocks-version "${PREVIOUS_VERSION}" \
                      --args "${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }}" \
                      --region "${{ env.REGION }}" \
                      --random-suffix "${rand_suffix}" | tee -a ${file_log_pre}
              fi

              pre_test_ret="$( grep "\[FAILED\]" ${file_log_pre} || true )"
              if [[ -n "$pre_test_ret" ]]; then
                  echo pre-test-result=[FAILED] >> $GITHUB_OUTPUT
              else
                  echo pre-test-result=[PASSED] >> $GITHUB_OUTPUT
              fi
              rm -rf ${file_log_pre}        
          fi
          
          file_log_install="$(date +%Y-%m-%d-%T)".log
          touch ${file_log_install}
          bash .github/utils/kbcli-test.sh \
              --type "0" \
              --kubeblocks-version "${KB_VERSION}" \
              --cloud-provider "k3s" \
              --args "${{ inputs.test-args }} --enable-csi-hostpath-driver false --config-s3 true --check-addon false --upgrade true --enable-addon kubebench --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }}" \
              --region "${{ env.REGION }}" \
              --random-suffix "${rand_suffix}" | tee -a ${file_log_install}
          rm -rf ${file_log_install} 
          
          file_log="$(date +%Y-%m-%d-%T)".log
          touch  ${file_log}
          if [[ "${KB_VERSION}" != "0.5."* && "${KB_VERSION}" != "0.6."* && "${KB_VERSION}" != "0.7."* && "${KB_VERSION}" != "0.8."* && -n "${{ env.JIHULAB_ACCESS_TOKEN }}" ]]; then
              bash .github/utils/kbcli-test.sh \
                  --type "${{ inputs.test-type }}" \
                  --kubeblocks-version "${KB_VERSION}" \
                  --args "${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }} --jihulab-token ${{ env.JIHULAB_ACCESS_TOKEN }} " \
                  --region "${{ env.REGION }}" \
                  --random-suffix "${rand_suffix}" | tee -a ${file_log}
          else
              bash .github/utils/kbcli-test.sh \
                  --type "${{ inputs.test-type }}" \
                  --kubeblocks-version "${KB_VERSION}" \
                  --args "${{ inputs.test-args }} --aws-access-key-id ${{ env.AWS_ACCESS_KEY_ID }} --aws-secret-access-key ${{ env.AWS_SECRET_ACCESS_KEY }}" \
                  --region "${{ env.REGION }}" \
                  --random-suffix "${rand_suffix}" | tee -a ${file_log}
          fi
          
          test_ret="$( grep "\[FAILED\]" ${file_log} || true )"
          if [[ -n "$test_ret" ]]; then
              echo test-result=[FAILED] >> $GITHUB_OUTPUT
              exit 1
          else
              echo test-result=[PASSED] >> $GITHUB_OUTPUT
          fi

      - name: get runner name
        id: get_runner_name
        if: ${{ always() }}
        run: |
          echo runner-name=${RUNNER_NAME} >> $GITHUB_OUTPUT

  delete-self-runner:
    if: ${{ always() }}
    needs: [ kbcli-test-k3s ]
    uses: ./.github/workflows/delete-self-runner.yml
    with:
      RUNNER_NAME: "${{ needs.kbcli-test-k3s.outputs.runner-name }}"
      RUNNER_NAMESAPCE: "default"
    secrets: inherit
