name: Test Cloud Api On K3D Self Runner

on:
  workflow_dispatch:
    inputs:
      TEST_TYPE:
        description: "The specify version of GO (e.g. openapi-test|adminapi-test|engine-test)"
        type: string
        required: false
        default: 'openapi-test'
      TEST_ENGINES:
        description: "The specify version of GO (e.g. mysql)"
        type: string
        required: false
        default: 'mysql'
      CLOUD_BRANCH:
        description: "The cloud branch name (e.g. v0.29.0-alpha.167) "
        type: string
        required: false
        default: 'v0.29.0-alpha.167'
      K3S_VERSION:
        description: 'k3s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      TEST_INSTALLER:
        description: "Test installer (default: true)"
        type: boolean
        required: false
        default: true
  workflow_call:
    inputs:
      TEST_TYPE:
        description: "The specify version of GO (e.g. openapi-test|adminapi-test|engine-test)"
        type: string
        required: false
        default: 'openapi-test'
      TEST_ENGINES:
        description: "The specify version of GO (e.g. mysql)"
        type: string
        required: false
        default: 'mysql'
      CLOUD_BRANCH:
        description: "The cloud branch name (e.g. v0.29.0-alpha.167) "
        type: string
        required: false
        default: 'v0.29.0-alpha.167'
      K3S_VERSION:
        description: 'k3s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      TEST_INSTALLER:
        description: "Test installer (default: true)"
        type: boolean
        required: false
        default: true


run-name: E2E Test ${{ inputs.TEST_TYPE }} ${{ inputs.TEST_ENGINES }} on Env K3s Ref:${{ inputs.CLOUD_BRANCH }}

env:
  GITHUB_USER: ${{ secrets.PERSONAL_ACCESS_USER }}
  GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  K3D_NAME: kbcloud
  CLOUD_LICENSE: ${{ secrets.CLOUD_LICENSE }}
  DOCKER_REGISTRY_URL: docker.io
  DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

jobs:
  get-test-type:
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.get_test_type.outputs.test-type }}
      cloud-branch: ${{ steps.get_test_type.outputs.cloud-branch }}
      test-installer: ${{ steps.get_test_type.outputs.test-installer }}
      test-engines: ${{ steps.get_test_type.outputs.test-engines }}
    steps:
      - name: Get test type
        id: get_test_type
        run: |
          TEST_TYPES="${{ inputs.TEST_TYPE }}"
          test_type=""
          for test_type_tmp in $(echo "${TEST_TYPES}" | sed 's/|/ /g' ); do
              if [[ -z "${test_type}" ]]; then
                  test_type="{\"test-type\":\"${test_type_tmp}\"}"
              else
                  test_type="${test_type},{\"test-type\":\"${test_type_tmp}\"}"
              fi
          done
          echo "${test_type}"
          echo "test-type={\"include\":[${test_type}]}" >> $GITHUB_OUTPUT
          
          CLOUD_BRANCH="${{ inputs.CLOUD_BRANCH }}"
          if [[ -z "$CLOUD_BRANCH" ]]; then
              CLOUD_BRANCH="main"
          fi
          echo cloud-branch="$CLOUD_BRANCH" >> $GITHUB_OUTPUT
          
          TEST_ENGINES="${{ inputs.TEST_ENGINES }}"
          if [[ -z "$TEST_ENGINES" ]]; then
              TEST_ENGINES="mysql"
          fi
          echo test-engines="$TEST_ENGINES" >> $GITHUB_OUTPUT
          
          # check test installer
          TEST_INSTALLER="false"
          if [[ "${CLOUD_BRANCH}" == "v"*"."*"."* && "${{ inputs.TEST_INSTALLER }}" == "true" ]]; then
              TEST_INSTALLER="true"
          fi
          echo test-installer="$TEST_INSTALLER" >> $GITHUB_OUTPUT

  enable-runner:
    needs: [ get-test-type ]
    if: ${{ needs.get-test-type.outputs.test-installer == 'true' }}
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
    secrets: inherit

  openapi-test-k3s:
    if: ${{ needs.get-test-type.outputs.test-installer == 'true' && contains(inputs.TEST_TYPE, 'openapi-test') }}
    needs: [ get-test-type, enable-runner ]
    uses: ./.github/workflows/cloud-e2e-k3s-test.yml
    with:
      TEST_TYPE: "openapi-test"
      TEST_ENGINES: "${{ needs.get-test-type.outputs.test-engines }}"
      CLOUD_BRANCH: "${{ needs.get-test-type.outputs.cloud-branch }}"
      K3S_VERSION: "${{ inputs.K3S_VERSION }}"
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit

  adminapi-test-k3s:
    if: ${{ needs.get-test-type.outputs.test-installer == 'true' && contains(inputs.TEST_TYPE, 'adminapi-test') }}
    needs: [ get-test-type, enable-runner ]
    uses: ./.github/workflows/cloud-e2e-k3s-test.yml
    with:
      TEST_TYPE: "adminapi-test"
      TEST_ENGINES: "${{ needs.get-test-type.outputs.test-engines }}"
      CLOUD_BRANCH: "${{ needs.get-test-type.outputs.cloud-branch }}"
      K3S_VERSION: "${{ inputs.K3S_VERSION }}"
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit

  engine-test-k3s:
    if: ${{ needs.get-test-type.outputs.test-installer == 'true' && contains(inputs.TEST_TYPE, 'engine-test') }}
    needs: [ get-test-type, enable-runner ]
    uses: ./.github/workflows/cloud-e2e-k3s-test.yml
    with:
      TEST_TYPE: "engine-test"
      TEST_ENGINES: "${{ needs.get-test-type.outputs.test-engines }}"
      CLOUD_BRANCH: "${{ needs.get-test-type.outputs.cloud-branch }}"
      K3S_VERSION: "${{ inputs.K3S_VERSION }}"
      APECD_REF: ${{ inputs.APECD_REF }}
    secrets: inherit
    
  send-message:
    needs: [ get-test-type, openapi-test-k3s, adminapi-test-k3s, engine-test-k3s ]
    runs-on: ubuntu-latest
    if: ${{ always() && needs.get-test-type.outputs.test-installer == 'true' }}
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          ref: ${{ inputs.APECD_REF }}

      - name: send test result message
        run: |
          CLOUD_BRANCH="${{ needs.get-test-type.outputs.cloud-branch }}"
          CLOUD_ENV_NAME="${{ needs.get-test-type.outputs.cloud-env-name }}"
          
          TEST_RESULT=""
          TEST_TYPES="${{ inputs.TEST_TYPE }}"
          
          if [[ "$TEST_TYPES" == *"openapi-test"* ]]; then
              TEST_RESULT="${TEST_RESULT}##openapi-test-k3s|${{ needs.openapi-test-k3s.outputs.test-result }}"
          fi
          
          if [[ "$TEST_TYPES" == *"adminapi-test"* ]]; then
              TEST_RESULT="${TEST_RESULT}##adminapi-test-k3s|${{ needs.adminapi-test-k3s.outputs.test-result }}"
          fi
          
          if [[ "$TEST_TYPES" == *"engine-test"* ]]; then
              TEST_RESULT="${TEST_RESULT}##engine-test-k3s|${{ needs.engine-test-k3s.outputs.test-result }}"
          fi
          
          echo "TEST_RESULT:${TEST_RESULT}"
          TEST_RESULT=$( bash .github/utils/utils.sh --type 40 \
              --github-repo "${{ github.repository }}" \
              --github-token "${{ env.GH_TOKEN }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          echo "TEST_RESULT:${TEST_RESULT}"
          
          date_ret=$(date +%Y-%m-%d-%T)
          TEST_TITLE="[${CLOUD_BRANCH}] Cloud E2E Test ${{ inputs.TEST_ENGINES }} on Env K3s [${date_ret}]"
          
          python3 .github/utils/send_mesage.py \
              --send-type ginkgo \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$TEST_TITLE" \
              --result "$TEST_RESULT"

  disable-runner:
    if: ${{ always() && needs.get-test-type.outputs.test-installer == 'true' }}
    needs: [ get-test-type, openapi-test-k3s, adminapi-test-k3s, engine-test-k3s ]
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
      ENABLE: "disable"
    secrets: inherit
