name: Send Feishui Message

on:
  workflow_call:
    inputs:
      TYPE:
        description: 'The type to send message'
        required: false
        type: string
        default: '2'
      CONTENT:
        description: 'The send message content'
        required: false
        type: string
        default: ''
      VERSION:
        description: 'The version of release'
        required: false
        type: string
        default: ''
      APECD_REF:
        description: "The ref of apecloud-cd"
        type: string
        required: false
        default: 'main'
      BOT_TYPE:
        description: 'The bot type (e.g. release/package)'
        type: string
        required: false
        default: 'release'
      WAIT_TIME:
        description: 'Then wait time of send message'
        type: number
        required: false
        default: 0

env:
  RELEASE_BOT_WEBHOOK: ${{ secrets.RELEASE_BOT_WEBHOOK }}
  PACKAGE_BOT_WEBHOOK: ${{ secrets.PACKAGE_BOT_WEBHOOK }}

permissions:
  id-token: write
  contents: read

jobs:
  sned-message:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          ref: ${{ inputs.APECD_REF }}

      - name: send message
        run: |
          sleep ${{ inputs.WAIT_TIME }}
          
          cmd="bash apecloud-cd/.github/utils/webhook_utils.sh --type ${{ inputs.TYPE }} \
              --github-repo ${{ github.repository }} \
              --run-url $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID "
          
          if [[ "${{ inputs.BOT_TYPE }}" == "package" ]]; then
              if [[ -n "${{ env.PACKAGE_BOT_WEBHOOK }}" ]]; then
                  cmd="${cmd} --bot-webhook '${{ env.PACKAGE_BOT_WEBHOOK }}' "
              fi
          else
              if [[ -n "${{ env.RELEASE_BOT_WEBHOOK }}" ]]; then
                  cmd="${cmd} --bot-webhook '${{ env.RELEASE_BOT_WEBHOOK }}' "
              fi
          fi
          
          if [[ -n "${{ inputs.CONTENT }}" ]]; then
              cmd="${cmd} --content '${{ inputs.CONTENT }}' "
          fi
          
          if [[ -n "${{ inputs.VERSION }}" ]]; then
              cmd="${cmd} --version '${{ inputs.VERSION }}' "
          fi
          
          echo "$cmd"
          eval "$cmd"
