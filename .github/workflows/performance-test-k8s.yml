name: Performance Test on K8S

on:
  workflow_call:
    inputs:
      TEST_TYPE:
        description: 'test type name (e.g. mysql)'
        type: string
        required: true
        default: 'mysql'
      NODE_TYPE:
        description: 'node type (e.g. m5a.xlarge/m5a.2xlarge/m5a.4xlarge)'
        type: string
        required: true
        default: 'm5a.xlarge'
      PERFORMANCE_TYPE:
        description: 'performance type (e.g. Read-Intensive,Balanced,Write-Intensive)'
        type: string
        required: true
        default: 'Read-Intensive'
      BENCH_SIZES:
        description: 'bench sizes'
        type: string
        required: false
        default: ''
      BENCH_TABLES:
        description: 'bench tables'
        type: string
        required: false
        default: ''
      CLUSTER_STORAGE:
        description: 'cluster storage'
        type: string
        required: false
        default: ''
      KB_VERSION:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: 'v0.6.2'
      CLOUD_PROVIDER:
        description: 'cloud k8s cluster provider (e.g. eks)'
        type: string
        required: false
        default: 'eks'
      CLUSTER_VERSION:
        description: 'k8s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      REGION:
        description: 'k8s region name'
        type: string
        required: false
        default: 'cn-northwest-1'
      INSTANCE_TYPE:
        description: 'node instance types (e.g. amd64)'
        type: string
        required: false
        default: 'amd64'
      BRANCH_NAME:
        description: 'testinfra branch name'
        type: string
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
  workflow_dispatch:
    inputs:
      TEST_TYPE:
        description: 'test type name (e.g. mysql)'
        required: true
        default: 'mysql'
        type: choice
        options:
          - mysql
      NODE_TYPE:
        description: 'node type'
        required: true
        default: 'm5a.xlarge'
        type: choice
        options:
          - m5a.xlarge
          - m5a.2xlarge
          - m5a.4xlarge
      PERFORMANCE_TYPE:
        description: 'performance type (e.g. 1:Read-Intensive,2:Balanced,3:Write-Intensive)'
        required: true
        default: 'Read-Intensive'
        type: choice
        options:
          - Read-Intensive
          - Balanced
          - Write-Intensive
      KB_VERSION:
        description: 'kubeblocks release version'
        required: false
        default: 'v0.6.2'
      CLOUD_PROVIDER:
        description: 'cloud k8s cluster provider (e.g. eks)'
        required: false
        default: 'eks'
      CLUSTER_VERSION:
        description: 'k8s cluster version (e.g. 1.30)'
        required: false
        default: '1.30'
      REGION:
        description: 'k8s region name'
        required: false
        default: 'us-west-2'
      INSTANCE_TYPE:
        description: 'node instance types (e.g. amd64)'
        required: false
        default: 'amd64'
      BRANCH_NAME:
        description: 'testinfra branch name'
        required: false
        default: 'main'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'

run-name: performance ${{ inputs.TEST_TYPE }} ${{ inputs.NODE_TYPE }} ${{ inputs.PERFORMANCE_TYPE }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform-init-k8s:
    uses: ./.github/workflows/terraform-init.yml
    with:
      node-type: ${{ inputs.NODE_TYPE }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      cluster-version: ${{ inputs.CLUSTER_VERSION }}
      instance-type: ${{ inputs.INSTANCE_TYPE }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      region: ${{ inputs.REGION }}
      test-mode: "performance"
    secrets: inherit

  install-kubeblocks:
    if: ${{ needs.terraform-init-k8s.result == 'success' }}
    needs: [ terraform-init-k8s ]
    uses: ./.github/workflows/test-perfromance.yml
    with:
      test-type: "0"
      test-type-name: "install"
      release-version: "${{ inputs.KB_VERSION }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  create-cluster:
    if: ${{ needs.terraform-init-k8s.result == 'success' && needs.install-kubeblocks.result == 'success' }}
    needs: [ terraform-init-k8s, install-kubeblocks ]
    uses: ./.github/workflows/test-perfromance.yml
    with:
      test-type: "${{ inputs.TEST_TYPE }}"
      test-type-name: "${{ inputs.TEST_TYPE }}"
      cluster-storage: "${{ inputs.CLUSTER_STORAGE }}"
      node-type: "${{ inputs.NODE_TYPE }}"
      release-version: "${{ inputs.KB_VERSION }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      test-date: ${{ needs.install-kubeblocks.outputs.test-date }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  performance-prepare:
    if: ${{ needs.create-cluster.result == 'success' && needs.create-cluster.outputs.cluster-name != '' }}
    needs: [ create-cluster, terraform-init-k8s, install-kubeblocks ]
    uses: ./.github/workflows/test-perfromance.yml
    with:
      test-type: "${{ inputs.TEST_TYPE }}"
      test-type-name: "sysbench-prepare"
      cluster-name: ${{ needs.create-cluster.outputs.cluster-name }}
      cluster-storage: "${{ inputs.CLUSTER_STORAGE }}"
      node-type: "${{ inputs.NODE_TYPE }}"
      bench-mode: "prepare"
      performance-type: "${{ inputs.PERFORMANCE_TYPE }}"
      bench-sizes: "${{ inputs.BENCH_SIZES }}"
      bench-tables: "${{ inputs.BENCH_TABLES }}"
      release-version: "${{ inputs.KB_VERSION }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      test-date: ${{ needs.install-kubeblocks.outputs.test-date }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  performance-run:
    if: ${{ needs.performance-prepare.result == 'success' && needs.performance-prepare.outputs.cluster-name != '' }}
    needs: [ performance-prepare, terraform-init-k8s, install-kubeblocks ]
    uses: ./.github/workflows/test-perfromance.yml
    with:
      test-type: "${{ inputs.TEST_TYPE }}"
      test-type-name: "sysbench-run"
      cluster-storage: "${{ inputs.CLUSTER_STORAGE }}"
      cluster-name: ${{ needs.performance-prepare.outputs.cluster-name }}
      node-type: "${{ inputs.NODE_TYPE }}"
      bench-mode: "run"
      performance-type: "${{ inputs.PERFORMANCE_TYPE }}"
      bench-sizes: "${{ inputs.BENCH_SIZES }}"
      bench-tables: "${{ inputs.BENCH_TABLES }}"
      release-version: "${{ inputs.KB_VERSION }}"
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      test-date: ${{ needs.install-kubeblocks.outputs.test-date }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      branch-name: ${{ inputs.BRANCH_NAME }}
    secrets: inherit

  clean-cluster:
    if: ${{ needs.terraform-init-k8s.result == 'success' && needs.install-kubeblocks.result == 'success' && needs.performance-run.outputs.cluster-name != '' }}
    needs: [ terraform-init-k8s, install-kubeblocks, performance-run ]
    uses: ./.github/workflows/test-perfromance.yml
    with:
      test-type: "${{ inputs.TEST_TYPE }}"
      test-type-name: "clean"
      cluster-name: ${{ needs.performance-run.outputs.cluster-name }}
      k8s-cluster-name: ${{ needs.terraform-init-k8s.outputs.k8s-cluster-name }}
      test-date: ${{ needs.install-kubeblocks.outputs.test-date }}
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      region: ${{ inputs.REGION }}
      branch-name: ${{ inputs.BRANCH_NAME }}
      clean-cluster: "true"
    secrets: inherit

  send-message:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ performance-run ]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./
          ref: ${{ inputs.APECD_REF }}

      - name: send message
        id: get_trigger_mode
        run: |
          JOB_RUL=$( bash .github/utils/utils.sh --type 17 \
              --github-repo "${{ github.repository }}" \
              --job-name "sysbench-run" \
              --run-id "$GITHUB_RUN_ID" )
          
          export TZ='Asia/Shanghai'
          date_ret=$(date +%Y-%m-%d-%T)
          TEST_TITLE="[${{ inputs.KB_VERSION }}] performance ${{ inputs.TEST_TYPE }} ${{ inputs.NODE_TYPE }} ${{ inputs.PERFORMANCE_TYPE }} [${date_ret}]"
          TEST_RESULT="${{ needs.performance-run.outputs.perfromance-result }}"
          echo "TEST_TITLE:"$TEST_TITLE
          echo "TEST_RESULT:"$TEST_RESULT
          
          python3 .github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$TEST_TITLE" \
              --result "$TEST_RESULT" \
              --job-url "$JOB_RUL" \
              --send-type "performance"

  terraform-destroy-k8s:
    if: ${{ always() }}
    needs: [ terraform-init-k8s, send-message, clean-cluster ]
    uses: ./.github/workflows/terraform-destroy.yml
    with:
      cloud-provider: ${{ inputs.CLOUD_PROVIDER }}
      artifact-name: cicd-${{ inputs.CLOUD_PROVIDER }}-${{ github.sha }}
      region: ${{ inputs.REGION }}
    secrets: inherit
