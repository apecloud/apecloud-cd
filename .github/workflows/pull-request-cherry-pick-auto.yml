name: Pull Request Cherry Pick Auto

on:
  workflow_call:
    inputs:
      CHERRY_PICK_BRANCH_DEFAULT:
        description: "Cherry pick all branches by default"
        type: string
        required: false
        default: ''

env:
  GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  get-branch:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get_check_pick_branch.outputs.matrix }}
    steps:
      - name: get cherry pick branch
        id: get_check_pick_branch
        run: |
          CHERRY_PICK_BRANCH_DEFAULT="${{ inputs.CHERRY_PICK_BRANCH_DEFAULT }}"
          if [[ -z "${CHERRY_PICK_BRANCH_DEFAULT}" ]]; then
              CHERRY_PICK_BRANCH_DEFAULT="${{ vars.CHERRY_PICK_BRANCH }}"
          fi
          
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_LABELS=$(gh pr view ${PR_NUMBER} --repo ${{ github.repository }} --json labels | jq -r '.labels[].name')
          # check nopick label
          for pr_label in $(echo "${PR_LABELS}"); do
              if [[ "${pr_label}" == "nopick" ]]; then
                  echo "$(tput -T xterm setaf 3)nopick label found, skip cherry pick! $(tput -T xterm sgr0)"
                  exit 0
              fi
          done
          
          # check pick label
          CHERRY_PICK_BRANCH_TMP=""
          for pr_label in $(echo "${PR_LABELS}"); do
              if [[ "${pr_label}" == "pick" ]]; then
                  echo "$(tput -T xterm setaf 2)pick label found, cherry pick branch: ${CHERRY_PICK_BRANCH_DEFAULT}! $(tput -T xterm sgr0)"
                  CHERRY_PICK_BRANCH_TMP="${CHERRY_PICK_BRANCH_DEFAULT}"
              fi
          done
          
          if [[ -z "${CHERRY_PICK_BRANCH_TMP}" ]]; then
              # check pick label specify
              for pr_label in $(echo "${PR_LABELS}"); do
                  if [[ "${pr_label}" == "pick-"* ]]; then
                      echo "$(tput -T xterm setaf 2)${pr_label} label found, cherry pick branch: ${pr_label}! $(tput -T xterm sgr0)"
                      pr_label_tmp="release-${pr_label/pick-/}"
                      if [[ -z "${CHERRY_PICK_BRANCH_TMP}" ]]; then
                          CHERRY_PICK_BRANCH_TMP="${pr_label_tmp}"
                      else
                          CHERRY_PICK_BRANCH_TMP="${CHERRY_PICK_BRANCH_TMP}|${pr_label_tmp}"
                      fi
                  fi
              done
          fi
          
          CHERRY_PICK_BRANCH=""
          for cherry_pick_branch_name in $( echo "${CHERRY_PICK_BRANCH_TMP}" | sed 's/|/ /g'); do
              if [[ -z "$CHERRY_PICK_BRANCH" ]]; then
                  CHERRY_PICK_BRANCH="{\"cherry-pick-branch\":\"$cherry_pick_branch_name\"}"
              else
                  CHERRY_PICK_BRANCH="$CHERRY_PICK_BRANCH,{\"cherry-pick-branch\":\"$cherry_pick_branch_name\"}"
              fi
          done
          echo "CHERRY_PICK_BRANCH:${CHERRY_PICK_BRANCH}"
          
          echo "matrix={\"include\":[$CHERRY_PICK_BRANCH]}" >> $GITHUB_OUTPUT

  comment-pr:
    needs: [ get-branch ]
    name: ${{ matrix.cherry-pick-branch }}
    uses: ./.github/workflows/comment-issue.yml
    if: ${{ needs.get-branch.outputs.matrix != '' }}
    strategy:
      matrix: ${{ fromJSON(needs.get-branch.outputs.matrix) }}
    with:
      GITHUB_REPO: "${{ github.repository }}"
      ISSUE_NUMBER: "${{ github.event.pull_request.number }}"
      ISSUE_COMMENT_BODY: "/cherry-pick ${{ matrix.cherry-pick-branch }}"
    secrets: inherit