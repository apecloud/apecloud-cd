name: Kbcli Test on K3S

on:
  workflow_dispatch:
    inputs:
      KB_VERSION:
        description: 'kubeblocks release version'
        required: false
        default: 'latest'
      KB_PRE_VERSION:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      TEST_TYPE:
        description: 'test type (e.g. apecloud-mysql|postgresql|redis|mongodb|kafka|pulsar|mysqlscale|weaviate|qdrant|smartengine|
        greptimedb|nebula|risingwave|starrocks|etcd|foxlake|orioledb|vanilla-pg|asmysql|openldap|
        opensearch|elasticsearch|vllm|tdengine|milvus|clickhouse|pika|ggml|zookeeper|mariadb|tidb|xinference|
        oracle|opengauss|influxdb|flink|solr|halo|mogdb|starrocks-ent|apecloud-postgresql|yashandb|polardbx|
        redis-cluster|camellia-redis-proxy|dmdb|minio|orchestrator)'
        type: string
        required: false
        default: ''
      CLUSTER_VERSION:
        description: 'k3s cluster version (e.g. 1.30)'
        required: false
        default: '1.30'
      BRANCH_NAME:
        description: 'testinfra branch name'
        required: false
        default: 'main'
      ARGS:
        description: "Test args"
        required: false
        default: ''
  workflow_call:
    inputs:
      KB_VERSION:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: 'latest'
      KB_PRE_VERSION:
        description: 'kubeblocks previous version of upgrade'
        type: string
        required: false
        default: ''
      TEST_TYPE:
        description: 'test type'
        type: string
        required: false
        default: ''
      CLUSTER_VERSION:
        description: 'k3s cluster version'
        type: string
        required: false
        default: '1.30'
      BRANCH_NAME:
        description: 'testinfra branch name'
        type: string
        required: false
        default: 'main'
      ARGS:
        description: "Test args"
        type: string
        required: false
        default: ''

run-name: kbcli:${{ inputs.KB_PRE_VERSION }} to ${{ inputs.KB_VERSION }} k3s:${{ inputs.CLUSTER_VERSION }} ${{ inputs.TEST_TYPE }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

permissions:
  id-token: write
  contents: read

jobs:
  enable-runner:
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
    secrets: inherit

  test-apecloud-mysql:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'apecloud-mysql')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "apecloud-mysql"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-postgresql:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'postgresql|') || endsWith(inputs.TEST_TYPE, 'postgresql')) && ! contains(inputs.TEST_TYPE, '-postgresql') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "2"
      test-type-name: "postgresql"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-redis:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'redis|') || endsWith(inputs.TEST_TYPE, 'redis')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "5"
      test-type-name: "redis"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-mongodb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mongodb')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "6"
      test-type-name: "mongodb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-kafka:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'kafka')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "7"
      test-type-name: "kafka"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-pulsar:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'pulsar|') || endsWith(inputs.TEST_TYPE, 'pulsar')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "8"
      test-type-name: "pulsar"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-mysqlscale:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mysqlscale')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "mysqlscale"
      test-args: "--enable-proxy true ${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-weaviate:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'weaviate')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "9"
      test-type-name: "weaviate"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-qdrant:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'qdrant')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "10"
      test-type-name: "qdrant"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-smartengine:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'smartengine')) && ! contains(inputs.KB_VERSION, 'v0.5.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "1"
      test-type-name: "smartengine"
      test-args: "--smartengine true ${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-greptimedb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'greptimedb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "11"
      test-type-name: "greptimedb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-nebula:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'nebula')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "12"
      test-type-name: "nebula"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-risingwave:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'risingwave')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "13"
      test-type-name: "risingwave"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-starrocks:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'starrocks|') || endsWith(inputs.TEST_TYPE, 'starrocks')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "14"
      test-type-name: "starrocks"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-etcd:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'etcd')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "15"
      test-type-name: "etcd"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-foxlake:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'foxlake')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v1.0.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "17"
      test-type-name: "foxlake"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-orioledb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'orioledb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "18"
      test-type-name: "orioledb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-vanilla-pg:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'vanilla-pg')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "20"
      test-type-name: "vanilla-pg"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-asmysql:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'asmysql|') || endsWith(inputs.TEST_TYPE, 'asmysql')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "21"
      test-type-name: "asmysql"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-asmysql-proxy:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'asmysql-proxy|') || endsWith(inputs.TEST_TYPE, 'asmysql-proxy')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') && ! contains(inputs.KB_VERSION, 'v0.9.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "21"
      test-type-name: "asmysql-proxy"
      test-args: "--enable-proxy true ${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-asmysql-orc:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'asmysql-orc|') || endsWith(inputs.TEST_TYPE, 'asmysql-orc')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') && ! contains(inputs.KB_VERSION, 'v0.9.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "21"
      test-type-name: "asmysql-orc"
      test-args: "--enable-orchestrator true ${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-asmysql-orc-proxy:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'asmysql-orc-proxy|') || endsWith(inputs.TEST_TYPE, 'asmysql-orc-proxy')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') && ! contains(inputs.KB_VERSION, 'v0.9.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "21"
      test-type-name: "asmysql-orc-proxy"
      test-args: "--enable-proxy true --enable-orchestrator true ${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-openldap:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'openldap')) && (contains(inputs.KB_VERSION, 'v0.7.') || contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "22"
      test-type-name: "openldap"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-opensearch:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'opensearch')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "24"
      test-type-name: "opensearch"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-elasticsearch:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'elasticsearch')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "25"
      test-type-name: "elasticsearch"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-vllm:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'vllm')) && (contains(inputs.KB_VERSION, 'v0.7.') || contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "26"
      test-type-name: "vllm"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-tdengine:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'tdengine')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "27"
      test-type-name: "tdengine"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-milvus:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'milvus')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "28"
      test-type-name: "milvus"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-clickhouse:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'clickhouse')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "29"
      test-type-name: "clickhouse"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-pika:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'pika')) && (contains(inputs.KB_VERSION, 'v0.7.') || contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "30"
      test-type-name: "pika"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-ggml:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'ggml')) && (contains(inputs.KB_VERSION, 'v0.7.') || contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "31"
      test-type-name: "ggml"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-zookeeper:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'zookeeper')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "32"
      test-type-name: "zookeeper"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-mariadb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mariadb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "33"
      test-type-name: "mariadb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-tidb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'tidb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "34"
      test-type-name: "tidb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-xinference:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'xinference')) && (contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "35"
      test-type-name: "xinference"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-oracle:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'oracle|') || endsWith(inputs.TEST_TYPE, 'oracle')) && (contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "36"
      test-type-name: "oracle"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-opengauss:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'opengauss')) && (contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "37"
      test-type-name: "opengauss"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-influxdb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'influxdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "38"
      test-type-name: "influxdb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-flink:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'flink')) && (contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "39"
      test-type-name: "flink"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-solr:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'solr')) && contains(inputs.KB_VERSION, 'v0.9.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "40"
      test-type-name: "solr"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-halo:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'halo')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') && ! contains(inputs.KB_VERSION, 'v1.0.')  }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "42"
      test-type-name: "halo"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-mogdb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'mogdb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.')  }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "43"
      test-type-name: "mogdb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-starrocks-ent:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'starrocks-ent')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.')  }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "45"
      test-type-name: "starrocks-ent"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-apecloud-postgresql:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'apecloud-postgresql')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "46"
      test-type-name: "apecloud-postgresql"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-yashandb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'yashandb')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "47"
      test-type-name: "yashandb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-polardbx:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'polardbx')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "23"
      test-type-name: "polardbx"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-redis-cluster:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'redis-cluster')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "48"
      test-type-name: "redis-cluster"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-camellia-redis-proxy:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'camellia-redis-proxy')) && (contains(inputs.KB_VERSION, 'v0.8.') || contains(inputs.KB_VERSION, 'v0.9.')) }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "49"
      test-type-name: "camellia-redis-proxy"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-dmdb:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'dmdb')) && contains(inputs.KB_VERSION, 'v0.9.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "50"
      test-type-name: "dmdb"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-minio:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'minio')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "51"
      test-type-name: "minio"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  test-orchestrator:
    if: ${{ needs.enable-runner.result == 'success' && always() && (inputs.TEST_TYPE == '' || contains(inputs.TEST_TYPE, 'orchestrator')) && ! contains(inputs.KB_VERSION, 'v0.5.') && ! contains(inputs.KB_VERSION, 'v0.6.') && ! contains(inputs.KB_VERSION, 'v0.7.') && ! contains(inputs.KB_VERSION, 'v0.8.') }}
    needs: [ enable-runner ]
    uses: ./.github/workflows/test-kbcli-k3s.yml
    with:
      release-version: "${{ inputs.KB_VERSION }}"
      previous-version: "${{ inputs.KB_PRE_VERSION }}"
      test-type: "52"
      test-type-name: "orchestrator"
      test-args: "${{ inputs.ARGS }}"
      branch-name: ${{ inputs.BRANCH_NAME }}
      k3s-version: ${{ inputs.CLUSTER_VERSION }}
    secrets: inherit

  send-message:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [ test-apecloud-mysql, test-postgresql, test-redis, test-mongodb, test-kafka, test-pulsar,
             test-mysqlscale, test-weaviate, test-qdrant, test-smartengine, test-greptimedb, test-nebula,
             test-risingwave, test-starrocks, test-etcd, test-foxlake, test-asmysql,
             test-openldap, test-milvus, test-clickhouse, test-pika, test-opensearch, test-elasticsearch,
             test-vllm, test-tdengine, test-orioledb, test-vanilla-pg, test-ggml, test-zookeeper,
             test-mariadb, test-tidb, test-xinference, test-oracle, test-opengauss, test-influxdb,
             test-flink, test-solr, test-halo, test-mogdb, test-starrocks-ent, test-apecloud-postgresql,
             test-yashandb, test-polardbx, test-redis-cluster, test-camellia-redis-proxy, test-dmdb,
             test-minio, test-orchestrator, test-asmysql-proxy, test-asmysql-orc, test-asmysql-orc-proxy]
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./

      - name: send pre message
        if: inputs.KB_PRE_VERSION
        run: |
          TEST_RESULT=""
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"apecloud-mysql"* ]]; then
              TEST_RESULT="${TEST_RESULT}##apecloud-mysql|${{ needs.test-apecloud-mysql.outputs.pre-test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || (("${{ inputs.TEST_TYPE }}" == *"postgresql|"* || "${{ inputs.TEST_TYPE }}" == *"postgresql") && "${{ inputs.TEST_TYPE }}" != *"-postgresql"* ) ]]; then
              TEST_RESULT="${TEST_RESULT}##postgresql|${{ needs.test-postgresql.outputs.pre-test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"redis|"* || "${{ inputs.TEST_TYPE }}" == *"redis" ]]; then
              TEST_RESULT="${TEST_RESULT}##redis|${{ needs.test-redis.outputs.pre-test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mongodb"* ]]; then
              TEST_RESULT="${TEST_RESULT}##mongodb|${{ needs.test-mongodb.outputs.pre-test-result }}"
          fi
          
          if [[ "${{ inputs.KB_PRE_VERSION }}" != "v0.5."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"kafka"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##kafka|${{ needs.test-kafka.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"pulsar|"* || "${{ inputs.TEST_TYPE }}" == *"pulsar" ]]; then
                  TEST_RESULT="${TEST_RESULT}##pulsar|${{ needs.test-pulsar.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mysqlscale"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mysqlscale|${{ needs.test-mysqlscale.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"weaviate"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##weaviate|${{ needs.test-weaviate.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"qdrant"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##qdrant|${{ needs.test-qdrant.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"smarte"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##smartengine|${{ needs.test-smartengine.outputs.pre-test-result }}"
              fi
          fi
          
          if [[ "${{ inputs.KB_PRE_VERSION }}" != "v0.5."* && "${{ inputs.KB_PRE_VERSION }}" != "v0.6."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"greptimedb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##greptimedb|${{ needs.test-greptimedb.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"nebula"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##nebula|${{ needs.test-nebula.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"risingwave"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##risingwave|${{ needs.test-risingwave.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"starrocks|"* || "${{ inputs.TEST_TYPE }}" == *"starrocks" ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks|${{ needs.test-starrocks.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"etcd"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##etcd|${{ needs.test-etcd.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"foxlake"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##foxlake|${{ needs.test-foxlake.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"asmysql"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql|${{ needs.test-asmysql.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"openldap"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##openldap|${{ needs.test-openldap.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"milvus"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##milvus|${{ needs.test-milvus.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"clickhouse"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##clickhouse|${{ needs.test-clickhouse.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"pika"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##pika|${{ needs.test-pika.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"opensearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opensearch|${{ needs.test-opensearch.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"elasticsearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##elasticsearch|${{ needs.test-elasticsearch.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"tdengine"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tdengine|${{ needs.test-tdengine.outputs.pre-test-result }}"
              fi   
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"vllm"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##vllm|${{ needs.test-vllm.outputs.pre-test-result }}"
              fi    
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"orioledb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orioledb|${{ needs.test-orioledb.outputs.pre-test-result }}"
              fi  
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"vanilla-pg"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##vanilla-pg|${{ needs.test-vanilla-pg.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"ggml"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##ggml|${{ needs.test-ggml.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"zookeeper"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##zookeeper|${{ needs.test-zookeeper.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mariadb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mariadb|${{ needs.test-mariadb.outputs.pre-test-result }}"
              fi 
          fi
          
          if [[ "${{ inputs.KB_PRE_VERSION }}" != "v0.5."* && "${{ inputs.KB_PRE_VERSION }}" != "v0.6."* && "${{ inputs.KB_PRE_VERSION }}" != "v0.7."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"tidb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tidb|${{ needs.test-tidb.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"xinference"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##xinference|${{ needs.test-xinference.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"oracle|"* || "${{ inputs.TEST_TYPE }}" == *"oracle" ]]; then
                  TEST_RESULT="${TEST_RESULT}##oracle|${{ needs.test-oracle.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"opengauss"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opengauss|${{ needs.test-opengauss.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"influxdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##influxdb|${{ needs.test-influxdb.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"flink"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##flink|${{ needs.test-flink.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mogdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mogdb|${{ needs.test-mogdb.outputs.pre-test-result }}"
              fi  
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"redis-cluster"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##redis-cluster|${{ needs.test-redis-cluster.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"camellia-redis-proxy"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##camellia-redis-proxy|${{ needs.test-camellia-redis-proxy.outputs.pre-test-result }}"
              fi  
          fi 
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* && "${{ inputs.KB_VERSION }}" != "v0.8."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"solr"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##solr|${{ needs.test-solr.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"halo"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##halo|${{ needs.test-halo.outputs.pre-test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"starrocks-ent"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks-ent|${{ needs.test-starrocks-ent.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"apecloud-postgresql"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##apecloud-postgresql|${{ needs.test-apecloud-postgresql.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"yashandb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##yashandb|${{ needs.test-yashandb.outputs.pre-test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"polardbx"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##polardbx|${{ needs.test-polardbx.outputs.pre-test-result }}"
              fi 
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"dmdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##dmdb|${{ needs.test-dmdb.outputs.pre-test-result }}"
              fi 
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"minio"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##minio|${{ needs.test-minio.outputs.pre-test-result }}"
              fi 

              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"orchestrator"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orchestrator|${{ needs.test-orchestrator.outputs.pre-test-result }}"
              fi 
          fi 
          
          TEST_RESULT=$( bash .github/utils/utils.sh --type 12 \
              --github-repo "${{ github.repository }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          
          export TZ='Asia/Shanghai'
          date_ret=$(date +%Y-%m-%d-%T)
          test_title="[${{ inputs.KB_PRE_VERSION }}] Pre Test KBCLI on k3s:${{ inputs.CLUSTER_VERSION }} [${date_ret}]"
          python3 .github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$test_title" \
              --result "$TEST_RESULT"

      - name: send message
        run: |
          TEST_RESULT=""
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"apecloud-mysql"* ]]; then
              TEST_RESULT="${TEST_RESULT}##apecloud-mysql|${{ needs.test-apecloud-mysql.outputs.test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || (("${{ inputs.TEST_TYPE }}" == *"postgresql|"* || "${{ inputs.TEST_TYPE }}" == *"postgresql") && "${{ inputs.TEST_TYPE }}" != *"-postgresql"* ) ]]; then
              TEST_RESULT="${TEST_RESULT}##postgresql|${{ needs.test-postgresql.outputs.test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"redis|"* || "${{ inputs.TEST_TYPE }}" == *"redis" ]]; then
              TEST_RESULT="${TEST_RESULT}##redis|${{ needs.test-redis.outputs.test-result }}"
          fi
          
          if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mongodb"* ]]; then
              TEST_RESULT="${TEST_RESULT}##mongodb|${{ needs.test-mongodb.outputs.test-result }}"
          fi
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"kafka"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##kafka|${{ needs.test-kafka.outputs.test-result }}"
              fi
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"pulsar|"* || "${{ inputs.TEST_TYPE }}" == *"pulsar" ]]; then
                  TEST_RESULT="${TEST_RESULT}##pulsar|${{ needs.test-pulsar.outputs.test-result }}"
              fi
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mysqlscale"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mysqlscale|${{ needs.test-mysqlscale.outputs.test-result }}"
              fi
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"weaviate"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##weaviate|${{ needs.test-weaviate.outputs.test-result }}"
              fi
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"qdrant"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##qdrant|${{ needs.test-qdrant.outputs.test-result }}"
              fi
              
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"smarte"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##smartengine|${{ needs.test-smartengine.outputs.test-result }}"
              fi
          fi
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"greptimedb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##greptimedb|${{ needs.test-greptimedb.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"nebula"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##nebula|${{ needs.test-nebula.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"risingwave"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##risingwave|${{ needs.test-risingwave.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"starrocks"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks|${{ needs.test-starrocks.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"etcd"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##etcd|${{ needs.test-etcd.outputs.test-result }}"
              fi
             
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"foxlake"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##foxlake|${{ needs.test-foxlake.outputs.test-result }}"
              fi
            
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"asmysql|"* || "${{ inputs.TEST_TYPE }}" == *"asmysql" ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql|${{ needs.test-asmysql.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"openldap"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##openldap|${{ needs.test-openldap.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"milvus"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##milvus|${{ needs.test-milvus.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"clickhouse"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##clickhouse|${{ needs.test-clickhouse.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"pika"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##pika|${{ needs.test-pika.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"opensearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opensearch|${{ needs.test-opensearch.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"elasticsearch"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##elasticsearch|${{ needs.test-elasticsearch.outputs.test-result }}"
              fi
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"tdengine"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tdengine|${{ needs.test-tdengine.outputs.test-result }}"
              fi   
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"vllm"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##vllm|${{ needs.test-vllm.outputs.test-result }}"
              fi    
             
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"orioledb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orioledb|${{ needs.test-orioledb.outputs.test-result }}"
              fi  
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"vanilla-pg"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##vanilla-pg|${{ needs.test-vanilla-pg.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"ggml"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##ggml|${{ needs.test-ggml.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"zookeeper"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##zookeeper|${{ needs.test-zookeeper.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mariadb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mariadb|${{ needs.test-mariadb.outputs.test-result }}"
              fi 
          fi
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"tidb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##tidb|${{ needs.test-tidb.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"xinference"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##xinference|${{ needs.test-xinference.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"oracle|"* || "${{ inputs.TEST_TYPE }}" == *"oracle" ]]; then
                  TEST_RESULT="${TEST_RESULT}##oracle|${{ needs.test-oracle.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"opengauss"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##opengauss|${{ needs.test-opengauss.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"influxdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##influxdb|${{ needs.test-influxdb.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"flink"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##flink|${{ needs.test-flink.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"mogdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##mogdb|${{ needs.test-mogdb.outputs.test-result }}"
              fi   
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"redis-cluster"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##redis-cluster|${{ needs.test-redis-cluster.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"camellia-redis-proxy"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##camellia-redis-proxy|${{ needs.test-camellia-redis-proxy.outputs.test-result }}"
              fi  
          fi 
          
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* && "${{ inputs.KB_VERSION }}" != "v0.8."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"solr"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##solr|${{ needs.test-solr.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"halo"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##halo|${{ needs.test-halo.outputs.test-result }}"
              fi  
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"starrocks-ent"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##starrocks-ent|${{ needs.test-starrocks-ent.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"apecloud-postgresql"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##apecloud-postgresql|${{ needs.test-apecloud-postgresql.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"yashandb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##yashandb|${{ needs.test-yashandb.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"polardbx"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##polardbx|${{ needs.test-polardbx.outputs.test-result }}"
              fi 
          
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"dmdb"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##dmdb|${{ needs.test-dmdb.outputs.test-result }}"
              fi 

              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"minio"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##minio|${{ needs.test-minio.outputs.test-result }}"
              fi

              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"orchestrator"* ]]; then
                  TEST_RESULT="${TEST_RESULT}##orchestrator|${{ needs.test-orchestrator.outputs.test-result }}"
              fi 
          fi 
          if [[ "${{ inputs.KB_VERSION }}" != "v0.5."* && "${{ inputs.KB_VERSION }}" != "v0.6."* && "${{ inputs.KB_VERSION }}" != "v0.7."* && "${{ inputs.KB_VERSION }}" != "v0.8."* && "${{ inputs.KB_VERSION }}" != "v0.9."* ]]; then
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"asmysql-proxy|"* || "${{ inputs.TEST_TYPE }}" == *"asmysql-proxy" ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql-proxy|${{ needs.test-asmysql-proxy.outputs.test-result }}"
              fi
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"asmysql-orc|"* || "${{ inputs.TEST_TYPE }}" == *"asmysql-orc" ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql-orc|${{ needs.test-asmysql-orc.outputs.test-result }}"
              fi
              if [[ "${{ inputs.TEST_TYPE }}" == '' || "${{ inputs.TEST_TYPE }}" == *"asmysql-orc-proxy|"* || "${{ inputs.TEST_TYPE }}" == *"asmysql-orc-proxy" ]]; then
                  TEST_RESULT="${TEST_RESULT}##asmysql-orc-proxy|${{ needs.test-asmysql-orc-proxy.outputs.test-result }}"
              fi
          fi
          
          TEST_RESULT=$( bash .github/utils/utils.sh --type 12 \
              --github-repo "${{ github.repository }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          
          export TZ='Asia/Shanghai'
          date_ret=$(date +%Y-%m-%d-%T)
          test_title="[${{ inputs.KB_VERSION }}] Test KBCLI on k3s:${{ inputs.CLUSTER_VERSION }} [${date_ret}]"
          if [[ -n "${{ inputs.KB_PRE_VERSION }}" ]]; then
              test_title="[${{ inputs.KB_PRE_VERSION }}] upgrade to "$test_title
          fi 
          python3 .github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$test_title" \
              --result "$TEST_RESULT"

  disable-runner:
    if: ${{ always() }}
    needs: [ enable-runner, send-message ]
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
      ENABLE: "disable"
    secrets: inherit
