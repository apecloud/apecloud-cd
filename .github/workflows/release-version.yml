name: Release Version

on:
  workflow_call:
    inputs:
      RELEASE_VERSION:
        description: 'The version of release'
        type: string
        required: false
        default: ''
      CONTENT:
        description: 'the request content'
        type: string
        required: false
        default: ''
      APECD_REF:
        description: "The ref of apecloud-cd"
        type: string
        required: false
        default: 'main'
      BOT_TYPE:
        description: 'the bot type (e.g. release/package)'
        type: string
        required: false
        default: 'release'
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      KUBEBLOCKS_ADDON_BRANCH:
        description: "The branch of kubeblocks-addons"
        type: string
        required: false
        default: ''
      APECLOUD_ADDON_BRANCH:
        description: "The branch of apecloud-addons"
        type: string
        required: false
        default: ''
    outputs:
      release-version:
        description: "release version"
        value: "${{ jobs.get-version.outputs.release-version }}"
      release-branch:
        description: "release branch"
        value: "${{ jobs.get-version.outputs.release-branch }}"
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: 'The version of release'
        required: false
        default: ''
      CONTENT:
        description: 'the request content'
        required: false
        default: ''
      APECD_REF:
        description: "The ref of apecloud-cd"
        required: false
        default: 'main'
      BOT_TYPE:
        description: 'the bot type (e.g. release/package)'
        required: false
        default: 'release'
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      KUBEBLOCKS_ADDON_BRANCH:
        description: "The branch of kubeblocks-addons"
        type: string
        required: false
        default: ''
      APECLOUD_ADDON_BRANCH:
        description: "The branch of apecloud-addons"
        type: string
        required: false
        default: ''

env:
  GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  CUR_BRANCH: ${{ vars.CURRENT_RELEASE_BRANCH }}

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml
    with:
      RELEASE_VERSION: "${{ inputs.RELEASE_VERSION }}"
      CONTENT: "${{ inputs.CONTENT }}"
      APECD_REF: ${{ inputs.APECD_REF }}
      BOT_TYPE: ${{ inputs.BOT_TYPE }}
    secrets: inherit

  release-apecloud-deps-version:
    needs: [ get-version ]
    name: release ${{ matrix.repo-name }} version
    if: ${{ github.repository == 'apecloud/apecloud' }}
    uses: ./.github/workflows/trigger-workflow.yml
    strategy:
      matrix:
        repo-name: [ openconsole, apecloud-values ]
    with:
      GITHUB_REPO: "apecloud/${{ matrix.repo-name }}"
      VERSION: "${{ needs.get-version.outputs.release-version }}"
      BRANCH_NAME: "${{ needs.get-version.outputs.release-branch }}"
      WORKFLOW_ID: "release-version.yml"
      APECD_REF: "${{ inputs.APECD_REF }}"
    secrets: inherit

#  release-kbcli-cloud-tag:
#    needs: [ get-version ]
#    if: ${{ github.repository == 'apecloud/apecloud' && contains(inputs.CONTENT, 'kbcli') }}
#    uses: ./.github/workflows/trigger-workflow.yml
#    with:
#      VERSION: "${{ needs.get-version.outputs.release-version }}-cloud"
#      APECD_REF: ${{ inputs.APECD_REF }}
#      GITHUB_REPO: "apecloud/kbcli"
#      BRANCH_NAME: "${{ needs.get-version.outputs.kbcli-branch }}"
#      WORKFLOW_ID: "release-tag.yaml"
#    secrets: inherit

  release-message:
    if: ${{ needs.get-version.result == 'success' }}
    needs: [ get-version ]
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "1"
      VERSION: "${{ needs.get-version.outputs.release-version }}"
      APECD_REF: ${{ inputs.APECD_REF }}
      BOT_TYPE: ${{ inputs.BOT_TYPE }}
    secrets: inherit

  release-version:
    needs: [ get-version, release-message ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - name: checkout branch ${{ env.CUR_BRANCH }}
        if: ${{ inputs.RELEASE_VERSION == '' && env.CUR_BRANCH != '' }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.CUR_BRANCH }}
          fetch-depth: 0

      - name: checkout branch ${{ github.ref_name }}
        if: ${{ inputs.RELEASE_VERSION != '' || env.CUR_BRANCH == '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        if: ${{ github.repository == 'apecloud/apecloud' }}
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          token: ${{ env.GH_TOKEN }}
          ref: ${{ inputs.APECD_REF }}

      - name: Checkout kubeblocks-addons Code
        uses: actions/checkout@v4
        if: ${{ github.repository == 'apecloud/apecloud' && inputs.KUBEBLOCKS_ADDON_BRANCH != '' }}
        with:
          repository: apecloud/kubeblocks-addons
          path: kubeblocks-addons
          token: ${{ env.GH_TOKEN }}
          ref: ${{ inputs.KUBEBLOCKS_ADDON_BRANCH }}

      - name: Checkout apecloud-addons Code
        uses: actions/checkout@v4
        if: ${{ github.repository == 'apecloud/apecloud' && inputs.APECLOUD_ADDON_BRANCH != '' }}
        with:
          repository: apecloud/apecloud-addons
          path: apecloud-addons
          token: ${{ env.GH_TOKEN }}
          ref: ${{ inputs.APECLOUD_ADDON_BRANCH }}

      - name: get release commit
        id: get_release_commit
        run: |
          if [[ "${{ github.repository }}" == "apecloud/apecloud" ]]; then
              MANIFESTS_FILE="./manifests/deploy-manifests.yaml"
              RELEASE_VERSION="${{ needs.get-version.outputs.release-version }}"
              COMMIT_SHA="$(git rev-parse HEAD)"
              
              echo "update manifests version to ${RELEASE_VERSION}"
              bash ${{ github.workspace }}/apecloud-cd/.github/utils/manifests_version_update.sh "${MANIFESTS_FILE}" "${RELEASE_VERSION}"
              echo "update manifests version to ${RELEASE_VERSION} done"
              
              FILE_CHANGES=`git diff --name-only ${COMMIT_SHA}`
              if [[ ! -z "$FILE_CHANGES" ]]; then
                  echo $FILE_CHANGES
                  git config --local user.name "$GITHUB_ACTOR"
                  git config --local user.email "$GITHUB_ACTOR@users.noreply.github.com"
                  git commit -a -m "chore: auto update manifests file version to ${RELEASE_VERSION} "
              fi
              echo file_changes=$FILE_CHANGES >> $GITHUB_OUTPUT
          fi
          
          RELEASE_COMMIT="$(git rev-parse HEAD)"
          echo 'RELEASE_COMMIT='${RELEASE_COMMIT} >> $GITHUB_ENV

      - name: push changes to new branch
        if: ${{ github.repository == 'apecloud/apecloud' && needs.get-version.outputs.release-branch == 'main' && steps.get_release_commit.outputs.file_changes }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ env.GH_TOKEN }}
          branch: support/auto-update-manifests-file-version-${{ env.RELEASE_COMMIT }}

      - name: auto create pr head new branch
        if: ${{ github.repository == 'apecloud/apecloud' && needs.get-version.outputs.release-branch == 'main' && steps.get_release_commit.outputs.file_changes && !contains(inputs.RELEASE_VERSION, 'alpha') && !contains(inputs.CONTENT, 'alpha') }}
        run: |
          gh pr create --head "support/auto-update-manifests-file-version-${{ env.RELEASE_COMMIT }}" --title "chore: auto update manifests file version to ${RELEASE_VERSION}" --body ""

      - name: push changes
        uses: ad-m/github-push-action@master
        if: ${{ github.repository == 'apecloud/apecloud' && needs.get-version.outputs.release-branch != 'main' && steps.get_release_commit.outputs.file_changes && !contains(inputs.RELEASE_VERSION, 'alpha') && !contains(inputs.CONTENT, 'alpha') }}
        with:
          github_token: ${{ env.GH_TOKEN }}
          branch: ${{ needs.get-version.outputs.release-branch }}

      - name: push tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ needs.get-version.outputs.release-version }}
          github_token: ${{ env.GH_TOKEN }}
          commit_sha: ${{ env.RELEASE_COMMIT }}
          tag_prefix: ""

  send-message:
    needs: [ get-version, release-version ]
    if: ${{ failure() || cancelled() }}
    uses: ./.github/workflows/feishui-message.yml
    with:
      TYPE: "2"
      CONTENT: "release ${{ needs.get-version.outputs.release-version }} error"
      APECD_REF: ${{ inputs.APECD_REF }}
      BOT_TYPE: ${{ inputs.BOT_TYPE }}
    secrets: inherit
