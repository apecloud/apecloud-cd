name: Terrafrom Init

on:
  workflow_call:
    inputs:
      cloud-provider:
        description: 'cloud k8s cluster provider (e.g. eks/gke)'
        type: string
        required: false
        default: 'eks'
      cluster-version:
        description: 'k8s cluster version (e.g. 1.25)'
        type: string
        required: false
        default: ''
      instance-type:
        description: 'node instance types (e.g. amd64/arm64)'
        type: string
        required: false
        default: 'amd64'
      artifact-name:
        description: 'terraform artifact name'
        type: string
        required: false
        default: ''
      region:
        description: 'k8s region name'
        type: string
        required: false
        default: 'cn-northwest-1'
      cluster-name:
        description: 'k8s cluster name'
        type: string
        required: false
        default: ''
      test-type:
        description: 'test cluster type (e.g. mysql|postgres|redis|mongo|kafka|pulsar|weaviate|qdrant|smarte|scale|greptime|nebula|rswave|starrock)'
        type: string
        required: false
        default: ''
      test-mode:
        description: 'test mode'
        type: string
        required: false
        default: ""
      node-type:
        description: 'node type'
        type: string
        required: false
        default: ""
      kb-version:
        description: 'kubeblocks release version'
        type: string
        required: false
        default: ''
    outputs:
      k8s-cluster-name:
        description: "k8s cluster name"
        value: ${{ jobs.terraform-init.outputs.k8s-cluster-name }}

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform-init:
    runs-on: ubuntu-latest
    outputs:
      k8s-cluster-name: ${{ steps.terraform_init.outputs.k8s-cluster-name }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - uses: aws-actions/configure-aws-credentials@v2.2.0
        if: ${{ inputs.cloud-provider == 'eks' && env.AWS_ACCESS_KEY_ID != '' && env.AWS_SECRET_ACCESS_KEY != '' }}
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ inputs.region }}"

      - if: ${{ inputs.cloud-provider == 'gke' && env.GOOGLE_CREDENTIALS != '' }}
        id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GOOGLE_CREDENTIALS }}'

      - name: get deploy path
        id: get_deploy_path
        run: |
          DEPLOY_PATH=""
          if [[ "${{ inputs.cloud-provider }}" == "eks" && "${{ inputs.test-mode }}" == "multinode" ]]; then
              DEPLOY_PATH="./aws/eks-default-vpc-multinode"
          elif [[ "${{ inputs.cloud-provider }}" == "eks" ]]; then
              DEPLOY_PATH="./aws/eks-default-vpc"
          elif [[ "${{ inputs.cloud-provider }}" == "gke" ]]; then
              DEPLOY_PATH="./gcp/gke-cicd"
          fi
          echo "deploy-path:"$DEPLOY_PATH
          echo deploy-path=${DEPLOY_PATH} >> $GITHUB_OUTPUT

      - name: checkout cloud-provider
        uses: actions/checkout@v3
        with:
          repository: apecloud/cloud-provider
          ref: "apecd-deploy"
          path: ./
          token: ${{ env.GITHUB_TOKEN }}

      - name: terraform init k8s
        id: terraform_init
        run: |
          COUNTS=""
          if [[ -n "${{ inputs.test-type }}" ]]; then
              COUNTS=$(echo "${{ inputs.test-type }}" | grep -o "|" | wc -l)
              COUNTS=$(( $COUNTS + 1 ))
          fi
          NODE_TYPE="${{ inputs.node-type }}"
          if [[ "${{ inputs.test-mode }}" == "smoke" ]]; then
              if [[ -z "$COUNTS" ]]; then
                  COUNTS=4
              elif [[ $COUNTS -gt 1 ]]; then
                  COUNTS=$(( $COUNTS - 1 ))
              fi
              
              if [[ "${{ inputs.cloud-provider }}" == "eks" ]]; then
                  if [[ "${{ inputs.instance-type }}" == "arm64" ]]; then
                      NODE_TYPE="t4g.medium"
                  else
                      NODE_TYPE="t3a.medium"
                  fi
              elif [[ "${{ inputs.cloud-provider }}" == "gke" ]]; then
                  if [[ "${{ inputs.instance-type }}" == "arm64" ]]; then
                      NODE_TYPE=t2a-standard-2
                  else
                      NODE_TYPE="e2-standard-2"
                  fi
              fi
              echo "NODE_TYPE:$NODE_TYPE"
          elif [[ "${{ inputs.test-mode }}" == "fault" ]]; then
              if [[ -z "$COUNTS" ]]; then
                  COUNTS=3
              fi
          fi
          
          NODE_SIZE=""
          if [[ "${{ inputs.cloud-provider }}" == "eks" && -n "${COUNTS}" ]]; then
              NODE_SIZE="$(( $COUNTS * 2 ))"
          elif [[ "${{ inputs.cloud-provider }}" == "gke" && -n "${COUNTS}" ]]; then
              NODE_SIZE="$(( $COUNTS / 2 + 1 ))"
          fi
          
          if [[ "${{ inputs.cloud-provider }}" == "eks" && -z "${NODE_SIZE}" ]]; then
              if [[ "${{ inputs.kb-version }}" == "v0.5."* ]]; then
                  NODE_SIZE=4
              elif [[ "${{ inputs.kb-version }}" == "v0.6."* ]]; then
                  NODE_SIZE=17
              fi
          elif [[ "${{ inputs.cloud-provider }}" == "gke" && -z "${NODE_SIZE}" ]]; then
              if [[ "${{ inputs.kb-version }}" == "v0.5."* ]]; then
                  NODE_SIZE=2
              elif [[ "${{ inputs.kb-version }}" == "v0.6."* ]]; then
                  NODE_SIZE=6
              fi
          fi
          
          cd ${{ steps.get_deploy_path.outputs.deploy-path }}
          bash run.sh --type 1 \
              --cluster-version "${{ inputs.cluster-version }}" \
              --instance-type "${{ inputs.instance-type }}" \
              --cluster-name "${{ inputs.cluster-name }}" \
              --cluster-region "${{ inputs.region }}" \
              --node-size "${NODE_SIZE}" \
              --node-type "${NODE_TYPE}"

          K8S_CLUSTER_NAME=""
          if [[ "${{ inputs.cloud-provider }}" == "eks" ]]; then
              K8S_CLUSTER_NAME=$(cat terraform.tfstate | grep "\"EKS\":" | awk 'NR==1{print $2}' | sed 's/,//g;s/\"//g')
          elif [[ "${{ inputs.cloud-provider }}" == "gke" ]]; then
              K8S_CLUSTER_NAME=$(cat terraform.tfstate | grep "\"cluster\":" | awk 'NR==1{print $2}' | sed 's/,//g;s/\"//g')
          fi
          echo "k8s-cluster-name:${K8S_CLUSTER_NAME}"
          echo k8s-cluster-name=${K8S_CLUSTER_NAME} >> $GITHUB_OUTPUT
      
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ inputs.artifact-name }}
          path: ${{ steps.get_deploy_path.outputs.deploy-path }}
          retention-days: 1
