name: RELEASE-IMAGE

on:
  workflow_call:
    inputs:
      MAKE_OPS:
        description: "The ops name of makefile (default: push-image)"
        type: string
        required: false
        default: 'push-image'
      MAKE_OPS_PRE:
        description: "The pre ops name of makefile (e.g. generate)"
        type: string
        required: false
        default: ''
      IMG:
        description: "The URL to use building/pushing image targets (e.g. apecloud/kubeblocks)"
        type: string
        required: false
        default: ''
      REPOSITORY:
        description: "The REPOSITORY to use building/pushing image targets (e.g. apecloud)"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The tag name of image (default: latest)"
        type: string
        required: false
        default: ''
      BUILDX_PLATFORMS:
        description: "buildx platforms (default: linux/amd64,linux/arm64)"
        type: string
        required: false
        default: 'linux/amd64,linux/arm64'
      BUILDX_ENABLED:
        description: "buildx enable (default: true)"
        type: string
        required: false
        default: 'true'
      BUILDX_ARGS:
        description: "buildx args (default: --sbom=false --provenance=false)"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      GOOGLE_IMG:
        description: "The URL to use building/pushing gcr image targets (e.g. apecloud-prod/controller-manager/apecloud)"
        type: string
        required: false
        default: ''
      GOOGLE_REGISTRY_URL:
        description: "The GOOGLE REGISTRY URL to use building/pushing image targets (e.g. us-east1-docker.pkg.dev)"
        type: string
        required: false
        default: ''
      GIT_CONFIG:
        description: "InsteadOf git config global url (default: false)"
        type: boolean
        required: false
        default: false
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true
      MAKE_ARGS:
        description: "make args"
        type: string
        required: false
        default: ''
      EXTRA_BUILD_ARGS:
        description: "extra build args"
        type: string
        required: false
        default: ''
      ENABLE_SUBMODULE:
        description: "Enable checkout submodule  (default: false)"
        type: boolean
        required: false
        default: false
      PYTHON_VERSION:
        description: "Install the specify version of Python"
        type: string
        required: false
        default: ''
      POETRY_VERSION:
        description: "Install the specify version of Poetry"
        type: string
        required: false
        default: ''
      ARGS_TOKEN:
        description: "Enable set GITHUB_TOKEN to ARGS  (default: false)"
        type: boolean
        required: false
        default: false
      IMAGE_NAME:
        description: "specify image name"
        type: string
        required: false
        default: ""
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      ADDITIONAL_REPO:
        description: "The additional repos to checkout"
        type: boolean
        required: false
        default: false
      GITHUB_REPO:
        description: "The github repo to release image"
        type: string
        required: false
        default: ''
      GITHUB_REF:
        description: "The github repo ref to release image"
        type: string
        required: false
        default: 'main'
      GITHUB_PATH:
        description: "The path to release image"
        type: string
        required: false
        default: ''

env:
  DOCKER_REGISTRY_URL: docker.io
  ALIYUN_REGISTRY_URL_NEW: infracreate-registry.cn-zhangjiakou.cr.aliyuncs.com
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  ALIYUN_USER_NEW: ${{ secrets.ALIYUN_USER_NEW }}
  ALIYUN_PASSWORD_NEW: ${{ secrets.ALIYUN_PASSWORD_NEW }}
  GITHUB_USER: ${{ secrets.PERSONAL_ACCESS_USER }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  CONTROLLER_MANAGER_CFG: ${{ secrets.CONTROLLER_MANAGER_CFG }}
  OPENCONSOLE_CFG: ${{ secrets.OPENCONSOLE_CFG }}
  CONSOLE_PROXY_CFG: ${{ secrets.CONSOLE_PROXY_CFG }}
  DEFAULT_BUILDX_ARGS: '--sbom=false --provenance=false'
  POSTGRESQL_DB_HOST: ${{ secrets.POSTGRESQL_DB_HOST }}
  POSTGRESQL_DB_DATABASE: ${{ secrets.POSTGRESQL_DB_DATABASE }}
  POSTGRESQL_DB_USERNAME: ${{ secrets.POSTGRESQL_DB_USERNAME }}
  POSTGRESQL_DB_PASSWORD: ${{ secrets.POSTGRESQL_DB_PASSWORD }}
  POSTGRESQL_DB_PORT: 5432
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  JIHULAB_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}

jobs:
  release-image:
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    outputs:
      tag-name: ${{ steps.get_tag_name.outputs.TAG-NAME }}
    steps:
      - name: Free disk space
        run: |
          sudo apt-get remove aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            clang-6.0 lldb-6.0 lld-6.0 clang-format-6.0 clang-8 lldb-8 lld-8 clang-format-8 \
            clang-9 lldb-9 lld-9 clangd-9 clang-format-9 dotnet-sdk-3.0 dotnet-sdk-3.1=3.1.101-1 \
            esl-erlang firefox g++-8 g++-9 gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk ghc-8.0.2 ghc-8.2.2 ghc-8.4.4 ghc-8.6.2 ghc-8.6.3 ghc-8.6.4 \
            ghc-8.6.5 ghc-8.8.1 ghc-8.8.2 ghc-8.8.3 ghc-8.10.1 cabal-install-2.0 cabal-install-2.2 \
            cabal-install-2.4 cabal-install-3.0 cabal-install-3.2 heroku imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete mysql-client libmysqlclient-dev \
            mysql-server mssql-tools unixodbc-dev yarn bazel chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev php7.1 php7.1-bcmath \
            php7.1-bz2 php7.1-cgi php7.1-cli php7.1-common php7.1-curl php7.1-dba php7.1-dev \
            php7.1-enchant php7.1-fpm php7.1-gd php7.1-gmp php7.1-imap php7.1-interbase php7.1-intl \
            php7.1-json php7.1-ldap php7.1-mbstring php7.1-mcrypt php7.1-mysql php7.1-odbc \
            php7.1-opcache php7.1-pgsql php7.1-phpdbg php7.1-pspell php7.1-readline php7.1-recode \
            php7.1-snmp php7.1-soap php7.1-sqlite3 php7.1-sybase php7.1-tidy php7.1-xml \
            php7.1-xmlrpc php7.1-xsl php7.1-zip php7.2 php7.2-bcmath php7.2-bz2 php7.2-cgi \
            php7.2-cli php7.2-common php7.2-curl php7.2-dba php7.2-dev php7.2-enchant php7.2-fpm \
            php7.2-gd php7.2-gmp php7.2-imap php7.2-interbase php7.2-intl php7.2-json php7.2-ldap \
            php7.2-mbstring php7.2-mysql php7.2-odbc php7.2-opcache php7.2-pgsql php7.2-phpdbg \
            php7.2-pspell php7.2-readline php7.2-recode php7.2-snmp php7.2-soap php7.2-sqlite3 \
            php7.2-sybase php7.2-tidy php7.2-xml php7.2-xmlrpc php7.2-xsl php7.2-zip php7.3 \
            php7.3-bcmath php7.3-bz2 php7.3-cgi php7.3-cli php7.3-common php7.3-curl php7.3-dba \
            php7.3-dev php7.3-enchant php7.3-fpm php7.3-gd php7.3-gmp php7.3-imap php7.3-interbase \
            php7.3-intl php7.3-json php7.3-ldap php7.3-mbstring php7.3-mysql php7.3-odbc \
            php7.3-opcache php7.3-pgsql php7.3-phpdbg php7.3-pspell php7.3-readline php7.3-recode \
            php7.3-snmp php7.3-soap php7.3-sqlite3 php7.3-sybase php7.3-tidy php7.3-xml \
            php7.3-xmlrpc php7.3-xsl php7.3-zip php7.4 php7.4-bcmath php7.4-bz2 php7.4-cgi \
            php7.4-cli php7.4-common php7.4-curl php7.4-dba php7.4-dev php7.4-enchant php7.4-fpm \
            php7.4-gd php7.4-gmp php7.4-imap php7.4-interbase php7.4-intl php7.4-json php7.4-ldap \
            php7.4-mbstring php7.4-mysql php7.4-odbc php7.4-opcache php7.4-pgsql php7.4-phpdbg \
            php7.4-pspell php7.4-readline php7.4-snmp php7.4-soap php7.4-sqlite3 php7.4-sybase \
            php7.4-tidy php7.4-xml php7.4-xmlrpc php7.4-xsl php7.4-zip php-amqp php-apcu \
            php-igbinary php-memcache php-memcached php-mongodb php-redis php-xdebug \
            php-zmq snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org -yq >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          sudo apt-get autoclean -y >/dev/null 2>&1
          sudo rm -rf /usr/local/lib/android >/dev/null 2>&1
          docker rmi $(docker image ls -aq) >/dev/null 2>&1
          sudo swapoff -a
          sudo rm -f /swapfile
          df -h

      - name: Checkout Code
        if: ${{ ! inputs.ENABLE_SUBMODULE }}
        uses: actions/checkout@v4

      - name: Checkout Code With Submodule
        if: inputs.ENABLE_SUBMODULE
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          token: ${{ env.GITHUB_TOKEN }}

      - name: Checkout ${{ inputs.GITHUB_REPO }} Code
        if: ${{ inputs.ADDITIONAL_REPO && inputs.GITHUB_REPO != '' && inputs.GITHUB_PATH != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.GITHUB_REPO }}
          ref: ${{ inputs.GITHUB_REF }}
          path: ./${{ inputs.GITHUB_PATH }}
          token: ${{ env.GITHUB_TOKEN }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - name: Setup Python specify version
        if: inputs.PYTHON_VERSION
        uses: actions/setup-python@v4
        with:
          python-version: "${{ inputs.PYTHON_VERSION }}"

      - name: Setup Poetry specify version
        if: inputs.POETRY_VERSION
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: "${{ inputs.POETRY_VERSION }}"

      - name: git config
        if: inputs.GIT_CONFIG
        run: |
          git config --global url."https://${{ env.GITHUB_USER }}:${{ env.GITHUB_TOKEN }}@github.com".insteadof "https://github.com"

      - name: make pre
        if: inputs.MAKE_OPS_PRE
        run: |
          make ${{ inputs.MAKE_OPS_PRE }}

      - name: Remove v prefix
        id: get_tag_name
        shell: bash
        run: |
          tag_name="${{ inputs.VERSION }}"
          if [[ "$tag_name" == "v"*  && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              tag_name="${tag_name/v/}"
          fi
          echo TAG-NAME=$tag_name >> $GITHUB_OUTPUT

      - if: ${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASSWORD }}

      - if: ${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}
        name: Build and Push to Docker Hub
        run: |
          echo "Free space:"
          df -h
          cmd="make ${{ inputs.MAKE_OPS }} "
          cmd=$cmd"BUILDX_PLATFORMS=${{ inputs.BUILDX_PLATFORMS }} "
          cmd=$cmd"BUILDX_ENABLED=${{ inputs.BUILDX_ENABLED }} "
          cmd=$cmd"BUILDX_ARGS=\"${{ env.DEFAULT_BUILDX_ARGS }} ${{ inputs.BUILDX_ARGS }}\" "
          
          if [[ ! -z "${{ inputs.EXTRA_BUILD_ARGS }}" ]]; then
              if [[ "${{ inputs.ARGS_TOKEN }}" == "true" ]]; then
                  cmd=$cmd"EXTRA_BUILD_ARGS=\"${{ inputs.EXTRA_BUILD_ARGS }} --build-arg GITHUB_TOKEN=${{ env.GITHUB_TOKEN }} \" "
              else
                  cmd=$cmd"EXTRA_BUILD_ARGS=\"${{ inputs.EXTRA_BUILD_ARGS }}\" "
              fi
          elif [[ "${{ inputs.ARGS_TOKEN }}" == "true" ]]; then
              cmd=$cmd"EXTRA_BUILD_ARGS=\"--build-arg GITHUB_TOKEN=${{ env.GITHUB_TOKEN }} \" "
          fi
          
          if [[ ! -z "${{ inputs.VERSION }}" ]]; then
            cmd=$cmd"VERSION=${{ steps.get_tag_name.outputs.TAG-NAME }} "
          fi
          
          if [[ ! -z "${{ inputs.IMG }}" ]]; then
            cmd=$cmd"IMG=${{ env.DOCKER_REGISTRY_URL }}/${{ inputs.IMG }} "
          elif [[ -n "${{ inputs.REPOSITORY }}" ]]; then
            cmd=$cmd"REPOSITORY=${{ env.DOCKER_REGISTRY_URL }}/${{ inputs.REPOSITORY }} "
          fi
          
          if [[ ! -z "${{ inputs.MAKE_ARGS }}" ]]; then
            cmd=$cmd" \"${{ inputs.MAKE_ARGS }}\" "
          fi
          
          if [[ ! -z "${{ inputs.IMAGE_NAME }}" ]]; then
            cmd=$cmd"IMAGE_NAME=${{ inputs.IMAGE_NAME }} "
          fi
          
          eval "$cmd"

  sync-to-aliyun:
    runs-on: ubuntu-latest
    needs: [ release-image ]
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ inputs.APECD_REF }}

      - name: generate image yaml
        run: |
          IMAGES_TAG="${{ needs.release-image.outputs.tag-name }}"
          IMAGES_INPUT=""
          if [[ -n "${{ inputs.IMG }}" ]]; then
              IMAGES_INPUT="${{ inputs.IMG }}:${IMAGES_TAG}"
              if [[ "${{ inputs.IMG }}" == *"apecloud/sentry"* ]]; then
                  IMAGES_INPUT="${IMAGES_INPUT}|${{ inputs.IMG }}-init:${IMAGES_TAG}"
              fi
          else
              TARGETS="${{ inputs.MAKE_ARGS }}"
              case $TARGETS in
                  *TARGETS=apiserver*)
                      IMAGES_INPUT="apecloud/apiserver:${IMAGES_TAG}"
                  ;;
                  *TARGETS=openconsole*)
                      IMAGES_INPUT="apecloud/openconsole:${IMAGES_TAG}"
                  ;;
                  *TARGETS=prompt*)
                      IMAGES_INPUT="apecloud/prompt:${IMAGES_TAG}"
                  ;;
                  *TARGETS=sentry*)
                      IMAGES_INPUT="apecloud/sentry:${IMAGES_TAG}"
                      IMAGES_INPUT="${IMAGES_INPUT}|apecloud/sentry-init:${IMAGES_TAG}"
                  ;;
                  *TARGETS=task-manager*)
                      IMAGES_INPUT="apecloud/task-manager:${IMAGES_TAG}"
                  ;;
                  *TARGETS=*installer-offline*)
                      IMAGES_INPUT="apecloud/kubeblocks-installer:${IMAGES_TAG}-offline"
                  ;;
                  *TARGETS=*installer*)
                      IMAGES_INPUT="apecloud/kubeblocks-installer:${IMAGES_TAG}"
                  ;;
                  *TARGETS=terraform*)
                      IMAGES_INPUT="apecloud/terraform-provision:${IMAGES_TAG}"
                  ;;
                  *TARGETS*)
                      TARGETS_TMP=${TARGETS#*=}
                      TARGETS_TMP=$(echo "$TARGETS_TMP" | tr -d ' ')
                      IMAGES_INPUT="apecloud/${TARGETS_TMP}:${IMAGES_TAG}"
                  ;;
              esac
          fi
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/utils.sh \
            --type 32 \
            --images "${IMAGES_INPUT}" \
            --registry "${{ env.DOCKER_REGISTRY_URL }}"

      - uses: hhyasdf/image-sync-action@v1.1
        if: ${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' && env.ALIYUN_USER_NEW != '' && env.ALIYUN_PASSWORD_NEW != '' }}
        with:
          auth_file: ${{ github.workspace }}/apecloud-cd/.github/actions/image-sync-auth-new.yml
          images_file: ./image_sync_yaml_new.yml
          proc: 6
          retries: 5
          version: v1.5.2
        env:
          DOCKER_USER: ${{ env.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ env.DOCKER_PASSWORD }}
          ALIYUN_USER_NEW: ${{ env.ALIYUN_USER_NEW }}
          ALIYUN_PASSWORD_NEW: ${{ env.ALIYUN_PASSWORD_NEW }}
