name: Release Enterprise Charts

on:
  workflow_call:
    inputs:
      GITHUB_REPO:
        description: "The github repo to release chart"
        type: string
        required: false
        default: ''
      GITHUB_REF:
        description: "The github repo ref to release chart"
        type: string
        required: false
        default: 'main'
      MAKE_OPS:
        description: "The ops name of makefile (e.g. bump-chart-ver)"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      APP_VERSION:
        description: "The app version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      CHART_NAME:
        description: "The package(repo) name of helm chart (e.g. kubeblocks)"
        type: string
        required: false
        default: ''
      CHART_DIR:
        description: "The package dir of helm chart (default: deploy)"
        type: string
        required: false
        default: 'deploy'
      HELM_SET:
        description: "The install args of helm chart (e.g. prometheus.enabled=true)"
        type: string
        required: false
        default: ''
      DEP_REPO:
        description: "The dependency of helm chart (e.g. helm repo add grafana https://grafana.github.io/helm-charts)"
        type: string
        required: false
        default: ''
      PUSH_ENABLE:
        description: "Enable push helm chart"
        type: boolean
        required: false
        default: true
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      CHECK_ENABLE:
        description: "Enable check docker images"
        type: boolean
        required: false
        default: true
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true
      SPECIFY_CHART:
        description: "Only package the specify sub dir chart (default: helm)"
        type: string
        required: false
        default: ''
      K3S_VERSION:
        description: "The version of K3S (default: v1.28)"
        type: string
        required: false
        default: 'v1.28'
      MAKE_OPS_POST:
        description: "The post ops name of makefile"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      ENABLE_JIHU:
        description: "Enable upload to jihu chart"
        type: boolean
        required: false
        default: true
      SET_REGISTRY:
        description: "Enable set registry and repository"
        type: boolean
        required: false
        default: false


env:
  CR_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  HELM_VERSION: "v3.16.3"
  JIHULAB_ACCESS_TOKEN: ${{ secrets.GITLAB_ACCESS_TOKEN }}
  JIHULAB_ACCESS_USER: ${{ secrets.GITLAB_ACCESS_USER }}
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  DOCKER_REGISTRY_URL: docker.io
  ALIYUN_REGISTRY_URL: apecloud-registry.cn-zhangjiakou.cr.aliyuncs.com
  PROJECT_ID: 165897
  ALIYUN_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
  SKIP_CHECK_IMAGES: "apecloud/dm8_single|apecloud/dmdb_exporter|apecloud/mysql|apecloud/percona-xtrabackup|apecloud/oceanbase-ent|apecloud/yashandb-personal|apecloud/twemproxy|apecloud/xinference|apecloud/neon|apecloud/elasticsearch|apecloud/milvus-operator|apecloud/zookeeper|apecloud/xtrabackup|apecloud/postgres|apecloud/etcd|apecloud/apache-doris|apecloud/kingbase-monitor|apecloud/kingbase|apecloud/kafka|apecloud/prometheus-mssql-exporter|apecloud/cn-ubuntu-ent||apecloud/fe-ubuntu-ent|apecloud/kibana|apecloud/vllm-openai|apecloud/rocketmq|apecloud/oceanbase-ent|apecloud/kingbase|apecloud/kingbase-monitor|apecloud/kafka|apecloud/prometheus-mssql-exporter|apecloud/cn-ubuntu-ent|apecloud/fe-ubuntu-ent|apecloud/kibana|apecloud/vllm-openai|apecloud/rocketmq|apecloud/goldendb-dn|apecloud/goldendb-cn|apecloud/goldendb-gtm|apecloud/goldendb-control|goldendb-lds|apecloud/goldendb-zk"

jobs:
  release-chart:
    name: ${{ inputs.CHART_DIR }} ${{ inputs.CHART_NAME }} ${{ inputs.SPECIFY_CHART }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - name: Checkout Code
        if: ${{ inputs.GITHUB_REPO == '' }}
        uses: actions/checkout@v4

      - name: Checkout ${{ inputs.GITHUB_REPO }} Code
        if: ${{ inputs.GITHUB_REPO != '' }}
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.GITHUB_REPO }}
          path: ./
          token: ${{ env.CR_TOKEN }}
          ref: ${{ inputs.GITHUB_REF }}

      - uses: docker/setup-qemu-action@v3

      - name: Fetch History And Configure Git
        run: |
          git fetch --prune --unshallow
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          token: ${{ env.CR_TOKEN }}
          ref: ${{ inputs.APECD_REF }}

      - name: Update Dependency
        if: inputs.DEP_REPO
        run: |
          bash apecloud-cd/.github/utils/utils.sh --type 13 \
              --chart-path "${{ inputs.DEP_REPO }}"

      - name: remove v prefix
        id: get_version
        shell: bash
        run: |
          version="${{ inputs.VERSION }}"
          app_version="${{ inputs.APP_VERSION }}"
          if [[ "$version" == "v"*  && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              version="${version/v/}"
              app_version="${app_version/v/}"
          fi
          echo VERSION=$version >> $GITHUB_OUTPUT
          echo APP_VERSION=$app_version >> $GITHUB_OUTPUT

      - name: Check Addons Version Released
        if: ${{ inputs.CHART_DIR == 'addons' || inputs.CHART_DIR == 'addons-cluster' }}
        id: check_addons_version
        run: |
          echo "check addons version released"
          RELEASE_VERSION="${{ steps.get_version.outputs.VERSION }}"
          RELEASE_VERSION_TMP="${RELEASE_VERSION}"
          CHART_DIR="${{ inputs.CHART_DIR }}"
          CHART_DIR="${CHART_DIR%/*}"
          SPECIFY_CHART="${{ inputs.SPECIFY_CHART }}"
          SPECIFY_ADDONS_CHARTS=""
          released_flag=0
          
          for chart_dir in $(find ${CHART_DIR} -maxdepth 1 -type d); do
              check_flag=0
              if [[ -z "${RELEASE_VERSION}" ]]; then
                  RELEASE_VERSION_TMP=""
              fi
              chart_name=$(basename ${chart_dir})
              if [[ -n "${SPECIFY_CHART}" && "${chart_name}" != "${SPECIFY_CHART}" ]]; then
                  continue
              fi
          
              releases_notes_file="${chart_dir}/releases_notes.yaml"
              if [[ -f "${releases_notes_file}" ]]; then
                  if [[ -z "${RELEASE_VERSION_TMP}" ]]; then
                      addon_chart_path="${chart_dir}/Chart.yaml"
                      RELEASE_VERSION_TMP=$(yq e ".version" ${addon_chart_path})
                  fi
          
                  RELEASE_VERSIONS=$(yq e ".releases[].version" ${releases_notes_file})
                  for release_version in ${RELEASE_VERSIONS}; do
                      if [[ "${release_version}" == "${RELEASE_VERSION_TMP}" ]]; then
                          echo "$(tput -T xterm setaf 1)::error title=${CHART_DIR} ${chart_name} version ${RELEASE_VERSION_TMP} has been released and cannot be overwritten.$(tput -T xterm sgr0)"
                          released_flag=1
                          check_flag=1
                          break
                      fi
                  done
          
                  if [[ -z "${SPECIFY_CHART}" && -n "${RELEASE_VERSION_TMP}" && ${check_flag} -eq 0 ]]; then
                      if [[ -z "${SPECIFY_ADDONS_CHARTS}" ]]; then
                          SPECIFY_ADDONS_CHARTS="${chart_name}"
                      else
                          SPECIFY_ADDONS_CHARTS="${SPECIFY_ADDONS_CHARTS}|${chart_name}"
                      fi
                  fi
              fi
          done
          
          if [[ ${released_flag} -eq 1 ]]; then
              if [[ -z "${SPECIFY_CHART}" ]]; then
                  echo "SPECIFY_ADDONS_CHARTS:${SPECIFY_ADDONS_CHARTS}"
                  echo specify-addons-charts="${SPECIFY_ADDONS_CHARTS}" >> $GITHUB_OUTPUT
              else
                  exit 1
              fi
          fi

      - name: Bump helm chart version
        if: inputs.MAKE_OPS
        run: |
          make ${{ inputs.MAKE_OPS }} \
            VERSION="${{ steps.get_version.outputs.VERSION }}"

      - name: Set registry and repository ${{ env.DOCKER_REGISTRY_URL }}
        if: ${{ inputs.SET_REGISTRY || inputs.CHART_DIR == 'addons' }}
        run: |
          echo "set addons chart registry to apecloud and repogistory to ${{ env.DOCKER_REGISTRY_URL }}"
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/set_registry_and_repo.sh \
            "${{ env.DOCKER_REGISTRY_URL }}" "${{ inputs.CHART_DIR }}"

      - name: update chart notes release info
        if: ${{ inputs.CHART_DIR == 'addons' || inputs.CHART_DIR == 'addons-cluster' }}
        run: |
          REF_NAME="${{ github.ref_name }}"
          IS_ERTERPRISE="false"
          GITHUB_REPO="${{ inputs.GITHUB_REPO }}"
          if [[ -n "${GITHUB_REPO}" ]]; then
              REF_NAME="${{ inputs.GITHUB_REF }}"
          else
              GITHUB_REPO="${{ github.repository }}"
          fi
          
          if [[ "${GITHUB_REPO}" == *"apecloud/apecloud-addons"* ]]; then
              IS_ERTERPRISE="true"
          fi
          
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/update_chart_notes.sh \
              --base-notes "apecloud-cd/chart-values/release-notes.txt" \
              --chart-dir "${{ inputs.CHART_DIR }}" \
              --ref-name "${REF_NAME}" \
              --is-ent "${IS_ERTERPRISE}"

      - name: Package Helm Chart
        shell: bash
        run: |
          CHART_DIR="${{ inputs.CHART_DIR }}"
          CHART_DIR="${CHART_DIR%/*}"
          args=()
          if [[ -n "$CHART_DIR" ]]; then
              args+=(--charts-dir "$CHART_DIR" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.VERSION }}" ]]; then
              args+=(--release-version "${{ steps.get_version.outputs.VERSION }}" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.APP_VERSION }}" ]]; then
              args+=(--app-version "${{ steps.get_version.outputs.APP_VERSION }}" )
          fi
          
          if [[ -n "${{ inputs.SPECIFY_CHART }}" ]]; then
              args+=(--specify-chart "${{ inputs.SPECIFY_CHART }}" )
          else
              SPECIFY_ADDONS_CHARTS="${{ steps.check_addons_version.outputs.specify-addons-charts }}"
              if [[ -n "${SPECIFY_ADDONS_CHARTS}" ]]; then
                  args+=(--specify-chart "${SPECIFY_ADDONS_CHARTS}" )
              fi
          fi
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_package.sh" "${args[@]}"

      - name: helm lint
        run: |
          for chart in $(echo "$(ls .cr-release-packages)"); do
              if [[ "$chart" == "kubeblocks-cloud-"*".tgz" && -n "${{ inputs.HELM_SET }}" ]]; then
                  echo "helm lint $chart --set=\"${{ inputs.HELM_SET }}\""
                  helm lint .cr-release-packages/$chart --set="${{ inputs.HELM_SET }}"
              else
                  echo "helm lint $chart"
                  helm lint .cr-release-packages/$chart 
              fi
          done

      - name: setup k3s ${{ inputs.K3S_VERSION }}
        if: inputs.CHART_NAME
        uses: apecloud-inc/setup-k3d-k3s@v2
        with:
          version: ${{ inputs.K3S_VERSION }}
          github-token: ${{ env.CR_TOKEN }}

      - name: make post
        if: inputs.MAKE_OPS_POST
        run: |
          make ${{ inputs.MAKE_OPS_POST }}

      - name: helm validate
        if: inputs.CHART_NAME
        run: |
          RELEASE_CHART_CHECK_DIR="./release_charts_check"
          mkdir -p ${RELEASE_CHART_CHECK_DIR}
          CHEKC_CHART_NAME="${{ inputs.CHART_NAME }}"
          CHEKC_CHART_NAME="${CHEKC_CHART_NAME%%|*}"
          cp .cr-release-packages/${CHEKC_CHART_NAME}-${{ steps.get_version.outputs.VERSION }}.tgz ${RELEASE_CHART_CHECK_DIR}/
          cd ${RELEASE_CHART_CHECK_DIR}
          tar -zxvf ${CHEKC_CHART_NAME}-${{ steps.get_version.outputs.VERSION }}.tgz
          
          helm install ${CHEKC_CHART_NAME} \
            ${CHEKC_CHART_NAME} \
            --set="${{ inputs.HELM_SET }}" \
            --no-hooks
          
          helm template ${CHEKC_CHART_NAME} ${CHEKC_CHART_NAME} \
            --validate  \
            --set="${{ inputs.HELM_SET }}"

      - if: ${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: check images
        if: inputs.CHECK_ENABLE
        run: |   
          check_dockerhub="true"
          SKIP_CHECK_IMAGES=""
          if [[ -n "${{ vars.SKIP_CHECK_IMAGES }}" ]]; then
              SKIP_CHECK_IMAGES="${{ vars.SKIP_CHECK_IMAGES }}"
          elif [[ "${{ inputs.CHART_DIR }}" == "addons" ]]; then
              SKIP_CHECK_IMAGES="${{ env.SKIP_CHECK_IMAGES }}"
          fi
          
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/helm_image_check.sh \
              .cr-release-packages "${{ inputs.CHART_NAME }}" "${check_dockerhub}" "${SKIP_CHECK_IMAGES}"

      - name: Checkout helm-charts-enterprise Code
        if: inputs.PUSH_ENABLE
        uses: actions/checkout@v4
        with:
          repository: apecloud/helm-charts-enterprise
          path: helm-charts-enterprise
          token: ${{ env.CR_TOKEN }}
          ref: gh-pages

      - name: Fetch helm-charts-enterprise History And Configure Git
        if: inputs.PUSH_ENABLE
        run: |
          cd helm-charts-enterprise
          git fetch --prune --unshallow
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Upload and Index Helm Charts
        if: inputs.PUSH_ENABLE
        continue-on-error: true
        id: upload_index_helm_charts
        shell: bash
        run: |
          cd helm-charts-enterprise
          args=(--owner "apecloud" --repo "helm-charts-enterprise" --github-repo "apecloud/helm-charts-enterprise")
          UPLOAD_FLAG=0
          echo "upload-flag=${UPLOAD_FLAG}" >> $GITHUB_OUTPUT
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_release.sh" "${args[@]}"
          index_ret=$?
          if [[ $index_ret -eq 0 ]]; then
              UPLOAD_FLAG=1
              echo "upload-flag=${UPLOAD_FLAG}" >> $GITHUB_OUTPUT
          fi

      - name: Index Helm Charts retry
        if: ${{ inputs.PUSH_ENABLE && steps.upload_index_helm_charts.outputs.upload-flag == '0' }}
        shell: bash
        run: |
          cd helm-charts-enterprise
          args=(--owner "apecloud" --repo "helm-charts-enterprise" --github-repo "apecloud/helm-charts-enterprise")
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_release_update_index.sh" "${args[@]}"

      - name: Set registry and repository ${{ env.ALIYUN_REGISTRY_URL }}
        if: ${{ inputs.SET_REGISTRY || inputs.CHART_DIR == 'addons' }}
        run: |
          echo "set addons chart registry to apecloud and repogistory to ${{ env.ALIYUN_REGISTRY_URL }}"
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/set_registry_and_repo.sh \
            "${{ env.ALIYUN_REGISTRY_URL }}" "${{ inputs.CHART_DIR }}"

      - name: Package Helm Chart
        shell: bash
        run: |
          CHART_DIR="${{ inputs.CHART_DIR }}"
          CHART_DIR="${CHART_DIR%/*}"
          args=()
          if [[ -n "$CHART_DIR" ]]; then
              args+=(--charts-dir "$CHART_DIR" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.VERSION }}" ]]; then
              args+=(--release-version "${{ steps.get_version.outputs.VERSION }}" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.APP_VERSION }}" ]]; then
              args+=(--app-version "${{ steps.get_version.outputs.APP_VERSION }}" )
          fi
          
          if [[ -n "${{ inputs.SPECIFY_CHART }}" ]]; then
              args+=(--specify-chart "${{ inputs.SPECIFY_CHART }}" )
          else
              SPECIFY_ADDONS_CHARTS="${{ steps.check_addons_version.outputs.specify-addons-charts }}"
              if [[ -n "${SPECIFY_ADDONS_CHARTS}" ]]; then
                  args+=(--specify-chart "${SPECIFY_ADDONS_CHARTS}" )
              fi
          fi
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_package.sh" "${args[@]}"

      - name: helm lint
        if: ${{ inputs.SET_REGISTRY || inputs.CHART_DIR == 'addons' }}
        run: |
          for chart in $(echo "$(ls .cr-release-packages)"); do
              if [[ "$chart" == "kubeblocks-cloud-"*".tgz" && -n "${{ inputs.HELM_SET }}" ]]; then
                  echo "helm lint $chart --set=\"${{ inputs.HELM_SET }}\""
                  helm lint .cr-release-packages/$chart --set="${{ inputs.HELM_SET }}"
              else
                  echo "helm lint $chart"
                  helm lint .cr-release-packages/$chart 
              fi
          done

      - if: ${{ env.ALIYUN_USER != '' && env.ALIYUN_PASSWORD != '' }}
        name: Login to Aliyun Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY_URL }}
          username: ${{ env.ALIYUN_USER }}
          password: ${{ env.ALIYUN_PASSWORD }}

      - name: check images
        if: ${{ inputs.CHECK_ENABLE && (inputs.SET_REGISTRY || inputs.CHART_DIR == 'addons') }}
        run: |
          check_dockerhub="true"
          SKIP_CHECK_IMAGES=""
          if [[ -n "${{ vars.SKIP_CHECK_IMAGES }}" ]]; then
              SKIP_CHECK_IMAGES="${{ vars.SKIP_CHECK_IMAGES }}"
          elif [[ "${{ inputs.CHART_DIR }}" == "addons" ]]; then
              SKIP_CHECK_IMAGES="${{ env.SKIP_CHECK_IMAGES }}"
          fi
          
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/helm_image_check.sh \
              .cr-release-packages "${{ inputs.CHART_NAME }}" "${check_dockerhub}" "${SKIP_CHECK_IMAGES}"

      - name: Upload Helm Charts to Jihulab
        if: ${{ inputs.PUSH_ENABLE && inputs.ENABLE_JIHU }}
        run: |
          ls .cr-release-packages
          cd .cr-release-packages
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/release_gitlab.sh \
            --type 3  \
            --asset-path ./ \
            --access-token "${{ env.JIHULAB_ACCESS_TOKEN }}" \
            --access-user "${{ env.JIHULAB_ACCESS_USER }}"\
            --project-id "${{ env.PROJECT_ID }}"
