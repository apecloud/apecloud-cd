name: Test Cloud Upgrade On K3D Self Runner

on:
  workflow_dispatch:
    inputs:
      CLOUD_VERSION:
        description: 'kb-cloud version (e.g. v0.29.0-alpha.163)'
        type: string
        required: false
        default: 'v0.29.0-alpha.163'
      CLOUD_PRE_VERSION:
        description: 'kb-cloud previous version of upgrade (e.g. v0.28.127)'
        type: string
        required: false
        default: ''
      K3S_VERSION:
        description: 'k3s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
  workflow_call:
    inputs:
      CLOUD_VERSION:
        description: 'kb-cloud version (e.g. v0.29.0-alpha.163)'
        type: string
        required: false
        default: 'v0.29.0-alpha.163'
      CLOUD_PRE_VERSION:
        description: 'kb-cloud previous version of upgrade (e.g. v0.28.127)'
        type: string
        required: false
        default: ''
      K3S_VERSION:
        description: 'k3s cluster version (e.g. 1.30)'
        type: string
        required: false
        default: '1.30'
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
    outputs:
      installer-result:
        description: "kb cloud installer result"
        value: "${{ jobs.cloud-test-k3d.outputs.installer-result }}"
      upgrade-result:
        description: "kb cloud upgrade result"
        value: "${{ jobs.cloud-test-k3d.outputs.upgrade-result }}"

run-name: Cloud Test Upgrade From ${{ inputs.CLOUD_PRE_VERSION }} to ${{ inputs.CLOUD_VERSION }}

env:
  GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  K3D_NAME: kbcloud
  CLOUD_LICENSE: ${{ secrets.CLOUD_LICENSE }}

permissions:
  id-token: write
  contents: read

jobs:
  enable-runner:
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
    secrets: inherit

  cloud-test-k3d:
    needs: [ enable-runner ]
    runs-on: [ self-hosted, eks-k3d-runner ]
    outputs:
      installer-result: ${{ steps.install_kb_cloud.outputs.installer-result }}
      upgrade-result: ${{ steps.upgrade_kb_cloud.outputs.upgrade-result }}
      cloud-pre-version: ${{ steps.cloud_pre_version.outputs.cloud-pre-version }}
      runner-name: ${{ steps.get_runner_name.outputs.runner-name }}
    steps:
      - name: install gh cli
        if: ${{ inputs.CLOUD_PRE_VERSION == '' }}
        run: |
          curl -sSL https://github.com/cli/cli/releases/download/v2.63.2/gh_2.63.2_linux_amd64.tar.gz | tar -xzf - -C /tmp
          sudo mv /tmp/gh_2.63.2_linux_amd64/bin/gh /usr/local/bin
          gh --version

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          ref: ${{ inputs.APECD_REF }}

      - name: setup k3d k3s
        uses: apecloud-inc/setup-k3d-k3s@v2
        with:
          k3d-name: "${{ env.K3D_NAME }}"
          version: "v${{ inputs.K3S_VERSION }}"
          github-token: ${{ env.GH_TOKEN }}
          k3d-args: -p 443:443@loadbalancer -p 80:80@loadbalancer --agents 3

      - name: update k3d coredns cm
        run: |
          for i in {1..3}; do
              bash ${{ github.workspace }}/apecloud-cd/.github/utils/utils.sh --type 37
              sleep 1
          done

      - name: install cert-manager
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm install \
              cert-manager jetstack/cert-manager \
              --namespace cert-manager \
              --create-namespace \
              --version v1.16.0 \
              --set crds.enabled=true

      - name: get cloud pre version
        id: cloud_pre_version
        run: |
          CLOUD_PRE_VERSION="${{ inputs.CLOUD_PRE_VERSION }}"
          if [[ -z "$CLOUD_PRE_VERSION" ]]; then
              UPGRADE_VERSION="${{ inputs.CLOUD_VERSION }}"
              if [[ "$UPGRADE_VERSION" != "v"* ]]; then
                  UPGRADE_VERSION="v${UPGRADE_VERSION}"
              fi
              CLOUD_PRE_VERSION=$(bash ${{ github.workspace }}/apecloud-cd/.github/utils/utils.sh --type 39 \
                  --github-repo "apecloud/apecloud" \
                  --github-token "${{ env.GH_TOKEN }}" \
                  --version "${UPGRADE_VERSION}")
          fi
          echo "CLOUD_PRE_VERSION:$CLOUD_PRE_VERSION"
          echo "cloud-pre-version=${CLOUD_PRE_VERSION}" >> $GITHUB_OUTPUT

      - name: install kb cloud with ${{ steps.cloud_pre_version.outputs.cloud-pre-version }}
        run: |
          helm repo add kb-chart https://apecloud.github.io/helm-charts
          CLOUD_PRE_VERSION="${{ steps.cloud_pre_version.outputs.cloud-pre-version }}"
          HELM_CHART_PKG_NAME="kb-cloud-installer-${CLOUD_PRE_VERSION/v/}.tgz"
          helm_pull_cmd="helm pull kb-chart/kb-cloud-installer --version ${CLOUD_PRE_VERSION}"
          for i in {1..200}; do
              eval "$helm_pull_cmd" || true
              # check helm chart package
              echo "helm chart package checking..."
              if [[ -f "${HELM_CHART_PKG_NAME}" ]]; then
                  echo "found helm chart package ${HELM_CHART_PKG_NAME}"
                  break
              fi
              sleep 1
              helm repo update kb-chart
          done
          
          helm install installer kb-chart/kb-cloud-installer \
              --namespace kb-cloud \
              --create-namespace \
              --version "${CLOUD_PRE_VERSION}" \
              --set "version=${CLOUD_PRE_VERSION}" \
              --set image.registry="docker.io" \
              --set kubernetesProvider=k3d \
              --set fqdn.domain=mytest.kubeblocks.com \
              --set tls.enabled=true

      - name: check kb-cloud-installer pod Completed
        id: install_kb_cloud
        run: |
          sleep 10
          check_status=0
          for i in {1..200}; do
              if kubectl get pods -n kb-cloud | grep "kb-cloud-installer" | grep Completed ; then
                  echo "KB Cloud is ready"
                  check_status=1
                  break
              fi
              echo "Waiting for KB Cloud to be ready..."
              kubectl get pods -n kb-cloud
              echo ""
              sleep 5
          done
          
          installer_result="[PASSED]"
          if [[ $check_status -eq 0 ]]; then
              echo "KB Cloud is not ready"
              installer_result="[FAILED]"
              echo installer-result="${installer_result}" >> $GITHUB_OUTPUT
          
              installer_pods=$(kubectl get pods -n kb-cloud | grep "kb-cloud-installer" )
              echo "installer pod: $installer_pods"
              installer_pod_names="$(echo "${installer_pods}" | awk '{print $1}')"
              for installer_pod_name in $(echo "${installer_pod_names}"); do
                  echo "==================== pod ${installer_pod_name} logs ===================="
                  kubectl logs -n kb-cloud ${installer_pod_name}
              done 
          
              # logs kb-cloud error pod 
              kb_cloud_error_pods=$(kubectl get pods -n kb-cloud | grep -v "kb-cloud-installer" | grep -v "Completed" | grep -v "Running" | grep -v "NAME" | grep -v "ImagePull" | awk '{print $1}')
              echo "kb-cloud error pod: $kb_cloud_error_pods"
              for kb_cloud_error_pod in $(echo "${kb_cloud_error_pods}"); do
                  echo "==================== pod ${kb_cloud_error_pod} logs ===================="
                  kubectl logs -n kb-cloud ${kb_cloud_error_pod}
                  echo ""
              done
          
              exit 1
          else
              echo installer-result="${installer_result}" >> $GITHUB_OUTPUT
          fi

      - name: upgrade kb cloud to ${{ inputs.CLOUD_VERSION }}
        run: |
          helm uninstall installer --namespace kb-cloud
          sleep 2
          helm install installer-upgrade kb-chart/kb-cloud-installer \
              --namespace kb-cloud \
              --create-namespace \
              --version ${{ inputs.CLOUD_VERSION }} \
              --set version=${{ inputs.CLOUD_VERSION }} \
              --set image.registry="docker.io" \
              --set kubernetesProvider=k3d \
              --set fqdn.domain=mytest.kubeblocks.com \
              --set tls.enabled=true \
              --set action=upgrade

      - name: check kb-cloud-installer upgrade pod Completed
        id: upgrade_kb_cloud
        run: |
          sleep 10
          check_status=0
          for i in {1..200}; do
              if kubectl get pods -n kb-cloud | grep "kb-cloud-installer" | grep Completed ; then
                  echo "KB Cloud is ready"
                  check_status=1
                  break
              fi
              echo "Waiting for KB Cloud to be ready..."
              kubectl get pods -n kb-cloud
              echo ""
              sleep 5
          done
          
          upgrade_result="[PASSED]"
          if [[ $check_status -eq 0 ]]; then
              echo "KB Cloud is not ready"
              upgrade_result="[FAILED]"
              echo upgrade-result="${upgrade_result}" >> $GITHUB_OUTPUT
          
              installer_pods=$(kubectl get pods -n kb-cloud | grep "kb-cloud-installer" )
              echo "installer pod: $installer_pods"
              installer_pod_names="$(echo "${installer_pods}" | awk '{print $1}')"
              for installer_pod_name in $(echo "${installer_pod_names}"); do
                  echo "==================== pod ${installer_pod_name} logs ===================="
                  kubectl logs -n kb-cloud ${installer_pod_name}
              done 
          
              # logs kb-cloud error pod 
              kb_cloud_error_pods=$(kubectl get pods -n kb-cloud | grep -v "kb-cloud-installer" | grep -v "Completed" | grep -v "Running" | grep -v "NAME" | grep -v "ImagePull" | awk '{print $1}')
              echo "kb-cloud error pod: $kb_cloud_error_pods"
              for kb_cloud_error_pod in $(echo "${kb_cloud_error_pods}"); do
                  echo "==================== pod ${kb_cloud_error_pod} logs ===================="
                  kubectl logs -n kb-cloud ${kb_cloud_error_pod}
                  echo ""
              done
          
              exit 1
          else
              echo upgrade-result="${upgrade_result}" >> $GITHUB_OUTPUT
          fi

      - name: get runner name
        id: get_runner_name
        if: ${{ always() }}
        run: |
          echo runner-name=${RUNNER_NAME} >> $GITHUB_OUTPUT

  send-message:
    needs: [ cloud-test-k3d ]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./
          ref: ${{ inputs.APECD_REF }}

      - name: send test result message
        run: |
          CLOUD_PRE_VERSION="${{ needs.cloud-test-k3d.outputs.cloud-pre-version }}"
          INSTALLER_RESULT="${{ needs.cloud-test-k3d.outputs.installer-result }}"
          if [[ -z "${INSTALLER_RESULT}" ]]; then
              INSTALLER_RESULT="[FAILED]"
          fi
          UPGRADE_RESULT="${{ needs.cloud-test-k3d.outputs.upgrade-result }}"
          if [[ -z "${UPGRADE_RESULT}" ]]; then
              UPGRADE_RESULT="[FAILED]"
          fi
          
          TEST_RESULT="cloud-test-k3d|installer|${INSTALLER_RESULT}"
          TEST_RESULT="${TEST_RESULT}##cloud-test-k3d|upgrade|${UPGRADE_RESULT}"
          echo "${TEST_RESULT}" 
          
          TEST_RESULT=$( bash ${{ github.workspace }}/.github/utils/utils.sh --type 38 \
              --github-repo "${{ github.repository }}" \
              --github-token "${{ env.GH_TOKEN }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          echo $TEST_RESULT
          
          export TZ='Asia/Shanghai'
          date_ret=$(date +%Y-%m-%d-%T)
          TEST_TITLE="[${{ inputs.CLOUD_VERSION }}] Cloud E2E Test upgrade from ${CLOUD_PRE_VERSION} on Env:K3s [${date_ret}]"
          
          python3 ${{ github.workspace }}/.github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$TEST_TITLE" \
              --result "$TEST_RESULT"

  delete-self-runner:
    if: ${{ always() }}
    needs: [ cloud-test-k3d ]
    uses: ./.github/workflows/delete-self-runner.yml
    with:
      RUNNER_NAME: "${{ needs.cloud-test-k3d.outputs.runner-name }}"
      RUNNER_NAMESAPCE: "default"
    secrets: inherit

  disable-runner:
    if: ${{ always() }}
    needs: [ cloud-test-k3d ]
    uses: ./.github/workflows/enable-self-runner.yml
    with:
      CLOUD_PROVIDER: "eks"
      GITHUB_REPO: "${{ github.repository }}"
      RUNNER_NAMESPACE: "default"
      RUNNER_LABEL: "eks-k3d-runner"
      ENABLE: "disable"
    secrets: inherit
          
