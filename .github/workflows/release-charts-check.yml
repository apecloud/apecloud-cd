name: RELEASE-CHART-CHECK

on:
  workflow_call:
    inputs:
      MAKE_OPS:
        description: "The ops name of makefile (e.g. bump-chart-ver)"
        type: string
        required: false
        default: ''
      VERSION:
        description: "The version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      APP_VERSION:
        description: "The app version of helm chart (e.g. v0.4.0)"
        type: string
        required: false
        default: ''
      CHART_NAME:
        description: "The package(repo) name of helm chart (e.g. kubeblocks)"
        type: string
        required: false
        default: ''
      CHART_DIR:
        description: "The dir of Chart.yaml (default: deploy/helm)"
        type: string
        required: false
        default: 'deploy/helm'
      HELM_SET:
        description: "The install args of helm chart (e.g. prometheus.enabled=true)"
        type: string
        required: false
        default: ''
      DEP_REPO:
        description: "The dependency of helm chart (e.g. helm repo add grafana https://grafana.github.io/helm-charts)"
        type: string
        required: false
        default: ''
      PUSH_ENABLE:
        description: "Enable push helm chart"
        type: boolean
        required: false
        default: true
      APECD_REF:
        description: "The branch name of apecloud-cd"
        type: string
        required: false
        default: 'main'
      CHECK_ENABLE:
        description: "Enable check docker images"
        type: boolean
        required: false
        default: true
      REMOVE_PREFIX:
        description: "Enable remove prefix v  (default: true)"
        type: boolean
        required: false
        default: true
      SPECIFY_CHART:
        description: "Only package the specify sub dir chart (default: helm)"
        type: string
        required: false
        default: ''
      K3S_VERSION:
        description: "The version of K3S (default: v1.28)"
        type: string
        required: false
        default: 'v1.28'
      MAKE_OPS_POST:
        description: "The post ops name of makefile"
        type: string
        required: false
        default: ''
      GO_VERSION:
        description: "Install the specify version of GO"
        type: string
        required: false
        default: ''
      SET_REGISTRY:
        description: "Set registry and repository"
        type: string
        required: false
        default: ''
      CHECK_PRIVATE:
        description: "Enable check private docker images"
        type: boolean
        required: false
        default: false


env:
  CR_TOKEN: ${{ github.token }}
  HELM_VERSION: "v3.16.3"
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}
  ALIYUN_USER: ${{ secrets.ALIYUN_REGISTRY_USER }}
  ALIYUN_PASSWORD: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
  DOCKER_REGISTRY_URL: docker.io
  ALIYUN_REGISTRY_URL: apecloud-registry.cn-zhangjiakou.cr.aliyuncs.com
  SKIP_CHECK_IMAGES: "apecloud/dm8_single|apecloud/dmdb_exporter|apecloud/mysql|apecloud/percona-xtrabackup|apecloud/oceanbase-ent|apecloud/yashandb-personal|apecloud/twemproxy|apecloud/xinference|apecloud/neon|apecloud/elasticsearch|apecloud/milvus-operator|apecloud/zookeeper|apecloud/xtrabackup|apecloud/postgres|apecloud/etcd|apecloud/apache-doris|apecloud/kingbase-monitor|apecloud/kingbase|apecloud/kafka|apecloud/prometheus-mssql-exporter|apecloud/cn-ubuntu-ent||apecloud/fe-ubuntu-ent|apecloud/kibana|apecloud/vllm-openai|apecloud/rocketmq"


jobs:
  release-chart:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Setup Go specify version
        if: inputs.GO_VERSION
        uses: actions/setup-go@v3
        with:
          go-version: ${{ inputs.GO_VERSION }}

      - uses: docker/setup-qemu-action@v3

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch History And Configure Git
        run: |
          git fetch --prune --unshallow
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: apecloud-cd
          ref: ${{ inputs.APECD_REF }}

      - name: Update Dependency
        if: inputs.DEP_REPO
        run: |
          bash apecloud-cd/.github/utils/utils.sh --type 13 \
              --chart-path "${{ inputs.DEP_REPO }}"

      - name: remove v prefix
        id: get_version
        shell: bash
        run: |
          version="${{ inputs.VERSION }}"
          app_version="${{ inputs.APP_VERSION }}"
          if [[ "$version" == "v"*  && "${{ inputs.REMOVE_PREFIX }}" == "true" ]]; then
              version="${version/v/}"
              app_version="${app_version/v/}"
          fi
          echo VERSION=$version >> $GITHUB_OUTPUT
          echo APP_VERSION=$app_version >> $GITHUB_OUTPUT

      - name: Bump helm chart version
        if: inputs.MAKE_OPS
        run: |
          make ${{ inputs.MAKE_OPS }} \
            VERSION="${{ steps.get_version.outputs.VERSION }}"

      - name: Set registry and repository
        if: ${{ inputs.SET_REGISTRY != '' || inputs.CHART_DIR == 'addons' }}
        run: |
          SET_REGISTRY="${{ inputs.SET_REGISTRY }}"
          case $SET_REGISTRY in
              aliyun)
                  echo "set addons chart registry to apecloud and repogistory to ${{ env.ALIYUN_REGISTRY_URL }}"
                  bash ${{ github.workspace }}/apecloud-cd/.github/utils/set_registry_and_repo.sh \
                    "${{ env.ALIYUN_REGISTRY_URL }}" "${{ inputs.CHART_DIR }}"
              ;;
              dockerhub)
                  echo "set addons chart registry to apecloud and repogistory to ${{ env.DOCKER_REGISTRY_URL }}"
                  bash ${{ github.workspace }}/apecloud-cd/.github/utils/set_registry_and_repo.sh \
                    "${{ env.DOCKER_REGISTRY_URL }}" "${{ inputs.CHART_DIR }}"
              ;;
          esac

      - name: Package Helm Chart
        shell: bash
        run: |
          CHART_DIR="${{ inputs.CHART_DIR }}"
          CHART_DIR="${CHART_DIR%/*}"
          args=()
          if [[ -n "$CHART_DIR" ]]; then
              args+=(--charts-dir "$CHART_DIR" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.VERSION }}" ]]; then
              args+=(--release-version "${{ steps.get_version.outputs.VERSION }}" )
          fi
          
          if [[ -n "${{ steps.get_version.outputs.APP_VERSION }}" ]]; then
              args+=(--app-version "${{ steps.get_version.outputs.APP_VERSION }}" )
          fi
          
          if [[ -n "${{ inputs.SPECIFY_CHART }}" ]]; then
              args+=(--specify-chart "${{ inputs.SPECIFY_CHART }}" )
          fi
          
          "${{ github.workspace }}/apecloud-cd/.github/utils/helm_package.sh" "${args[@]}"

      - name: helm lint
        run: |
          for chart in $(echo "$(ls .cr-release-packages)"); do
              echo "helm lint $chart"
              helm lint .cr-release-packages/$chart
          done

      - name: setup k3s ${{ inputs.K3S_VERSION }}
        if: inputs.CHART_NAME
        uses: apecloud-inc/setup-k3d-k3s@v2
        with:
          version: ${{ inputs.K3S_VERSION }}
          github-token: ${{ env.CR_TOKEN }}

      - name: make post
        if: inputs.MAKE_OPS_POST
        run: |
          make ${{ inputs.MAKE_OPS_POST }}

      - name: helm validate
        if: inputs.CHART_NAME
        run: |
          CHEKC_CHART_NAME="${{ inputs.CHART_NAME }}"
          CHEKC_CHART_NAME="${CHEKC_CHART_NAME%%|*}"
          cp .cr-release-packages/${CHEKC_CHART_NAME}-${{ steps.get_version.outputs.VERSION }}.tgz ./
          
          tar -zxvf ${CHEKC_CHART_NAME}-${{ steps.get_version.outputs.VERSION }}.tgz
          
          helm install ${CHEKC_CHART_NAME} \
            ${CHEKC_CHART_NAME} \
            --set="${{ inputs.HELM_SET }}" \
            --no-hooks
          
          helm template ${CHEKC_CHART_NAME} ${CHEKC_CHART_NAME} --validate

      - if: ${{ env.DOCKER_USER != '' && env.DOCKER_PASSWORD != '' }}
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_URL }}
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASSWORD }}

      - if: ${{ env.ALIYUN_USER != '' && env.ALIYUN_PASSWORD != '' && inputs.CHECK_PRIVATE }}
        name: Login to Aliyun Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ALIYUN_REGISTRY_URL }}
          username: ${{ env.ALIYUN_USER }}
          password: ${{ env.ALIYUN_PASSWORD }}

      - name: check images
        if: inputs.CHECK_ENABLE
        run: |   
          check_dockerhub="true"
          SKIP_CHECK_IMAGES=""
          if [[ -n "${{ vars.SKIP_CHECK_IMAGES }}" ]]; then
              SKIP_CHECK_IMAGES="${{ vars.SKIP_CHECK_IMAGES }}"
          elif [[ "${{ inputs.CHART_DIR }}" == "addons" ]]; then
              SKIP_CHECK_IMAGES="${{ env.SKIP_CHECK_IMAGES }}"
          fi
          
          bash ${{ github.workspace }}/apecloud-cd/.github/utils/helm_image_check.sh \
              .cr-release-packages "${{ inputs.CHART_NAME }}" "${check_dockerhub}" "${SKIP_CHECK_IMAGES}"
