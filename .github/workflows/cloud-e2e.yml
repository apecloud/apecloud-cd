name: Cloud E2E

on:
  workflow_dispatch:
    inputs:
      TEST_TYPE:
        description: "The specify version of GO (e.g. openapi-test|adminapi-test|engine-test)"
        type: string
        required: false
        default: 'openapi-test'
      TEST_ENGINES:
        description: "The specify version of GO (e.g. mysql)"
        type: string
        required: false
        default: 'mysql'
      CLOUD_ENV_NAME:
        description: "The cloud env name of test (e.g. dev) "
        type: string
        required: false
        default: 'dev'
      CLOUD_BRANCH:
        description: "The cloud branch name (e.g. main) "
        type: string
        required: false
        default: 'main'
      GO_VERSION:
        description: "The specify version of GO (e.g. 1.22)"
        type: string
        required: false
        default: '1.22'
  workflow_call:
    inputs:
      TEST_TYPE:
        description: "The specify version of GO (e.g. openapi-test|adminapi-test|engine-test)"
        type: string
        required: false
        default: 'openapi-test'
      TEST_ENGINES:
        description: "The specify version of GO (e.g. mysql)"
        type: string
        required: false
        default: 'mysql'
      CLOUD_ENV_NAME:
        description: "The cloud env name of test (e.g. dev) "
        type: string
        required: false
        default: 'dev'
      CLOUD_BRANCH:
        description: "The cloud branch name (e.g. main) "
        type: string
        required: false
        default: 'main'
      GO_VERSION:
        description: "The specify version of GO (e.g. 1.22)"
        type: string
        required: false
        default: '1.22'

run-name: E2E Test ${{ inputs.TEST_TYPE }} ${{ inputs.TEST_ENGINES }} on Env:${{ inputs.CLOUD_ENV_NAME }} Ref:${{ inputs.CLOUD_BRANCH }}

env:
  ACK_KUBECONFIG_DEV: ${{ secrets.ACK_KUBECONFIG_DEV }}
  ACK_KUBECONFIG_DEMO: ${{ secrets.ACK_KUBECONFIG_DEMO }}
  IDC_KUBECONFIG_2: ${{ secrets.IDC_KUBECONFIG_2 }}
  IDC_KUBECONFIG_4: ${{ secrets.IDC_KUBECONFIG_4 }}
  ACK_KUBECONFIG_PROD: ${{ secrets.ACK_KUBECONFIG_PROD }}
  ACK_KUBECONFIG_INTL_PROD: ${{ secrets.ACK_KUBECONFIG_INTL_PROD }}
  VKE_KUBECONFIG_TEST: ${{ secrets.VKE_KUBECONFIG_TEST }}
  GITHUB_USER: ${{ secrets.PERSONAL_ACCESS_USER }}
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

jobs:
  get-test-type:
    runs-on: ubuntu-latest
    outputs:
      test-type: ${{ steps.get_test_type.outputs.test-type }}
    steps:
      - name: Get test type
        id: get_test_type
        run: |
          TEST_TYPES="${{ inputs.TEST_TYPE }}"
          test_type=""
          for test_type_tmp in $(echo "${TEST_TYPES}" | sed 's/|/ /g' ); do
              if [[ -z "${test_type}" ]]; then
                  test_type="{\"test-type\":\"${test_type_tmp}\"}"
              else
                  test_type="${test_type},{\"test-type\":\"${test_type_tmp}\"}"
              fi
          done
          echo "${test_type}"
          echo "test-type={\"include\":[${test_type}]}" >> $GITHUB_OUTPUT

  e2e-test:
    needs: [ get-test-type ]
    name: ${{ matrix.test-type }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.get-test-type.outputs.test-type) }}
    outputs:
      openapi-test-result: ${{ steps.get_test_result.outputs.openapi-test-result }}
      adminapi-test-result: ${{ steps.get_test_result.outputs.adminapi-test-result }}
      engine-test-result: ${{ steps.get_test_result.outputs.engine-test-result }}
      test-result: ${{ steps.get_test_result.outputs.test-result }}
    runs-on: ubuntu-latest
    steps:
      - name: get apecloud branch
        id: get_cloud_branch
        run: |
          CLOUD_BRANCH="${{ inputs.CLOUD_BRANCH }}"
          if [[ -z "$CLOUD_BRANCH" ]]; then
              CLOUD_BRANCH="main"
          fi
          echo CLOUD_BRANCH="$CLOUD_BRANCH" >> $GITHUB_ENV
          
          GO_VERSION="${{ inputs.GO_VERSION }}"
          if [[ -z "$GO_VERSION" ]]; then
              GO_VERSION="1.22"
          fi
          echo GO_VERSION="$GO_VERSION" >> $GITHUB_ENV

      - name: Checkout apecloud Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud
          path: ./
          token: ${{ env.GITHUB_TOKEN }}
          ref: ${{ env.CLOUD_BRANCH }}

      - name: checkout apecloud-cd code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd
          path: ./apecloud-cd

      - name: Setup Go specify version
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: git config
        run: |
          git config --global url."https://${{ env.GITHUB_USER }}:${{ env.GITHUB_TOKEN }}@github.com".insteadof "https://github.com"

      - name: Configure ACK Context ${{ inputs.CLOUD_ENV_NAME }}
        id: cloud_env
        run: |
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config
          CLOUD_ENV_NAME="${{ inputs.CLOUD_ENV_NAME }}"
          if [[ -z "$CLOUD_ENV_NAME" ]]; then
              CLOUD_ENV_NAME="dev"
          fi
          echo CLOUD_ENV_NAME="$CLOUD_ENV_NAME" >> $GITHUB_ENV
          
          E2E_ENV_VARS=""
          case "$CLOUD_ENV_NAME" in
              dev)
                  echo '${{ env.ACK_KUBECONFIG_DEV }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_DEV }}"
              ;;
              demo)
                  echo '${{ env.ACK_KUBECONFIG_DEMO }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_DEMO }}"
              ;;
              idc2)
                  echo '${{ env.IDC_KUBECONFIG_2 }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_IDC2 }}"
              ;;
              idc4)
                  echo '${{ env.IDC_KUBECONFIG_4 }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_IDC4 }}"
              ;;
              prod)
                  echo '${{ env.ACK_KUBECONFIG_PROD }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_PROD }}"
              ;;
              intl_prod)
                  echo '${{ env.ACK_KUBECONFIG_INTL_PROD }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_INTL_PROD }}"
              ;;
              vke_test)
                  echo '${{ env.VKE_KUBECONFIG_TEST }}' > $HOME/.kube/config
                  E2E_ENV_VARS="${{ vars.E2E_ENV_VARS_VKE_TEST }}"
              ;;
          esac
          echo E2E_ENV_VARS="$E2E_ENV_VARS" >> $GITHUB_ENV

      - name: install ginkgo
        run: |
          cd e2e
          make module
          make install-ginkgo

      - name: ${{ matrix.test-type }}
        id: get_test_result
        run: |
          cd e2e
          file_log="test_result.log"
          touch ${file_log} 
          
          TEST_ENGINES="${{ inputs.TEST_ENGINES }}"
          if [[ -z "$TEST_ENGINES" ]]; then
              TEST_ENGINES="mysql"
          fi
          
          for env_vars in $(echo "${E2E_ENV_VARS}" | sed 's/|/ /g'); do
              eval_cmd="export $env_vars"
              echo "$eval_cmd"
              eval "$eval_cmd"
          done
          
          if [[ -n "${TEST_ENGINES}" ]]; then
              echo "export KB_CLOUD_TEST_ENGINES=${TEST_ENGINES}"
              export KB_CLOUD_TEST_ENGINES=${TEST_ENGINES}
          fi
          
          TEST_TYPE="${{ matrix.test-type }}"
          if [[ -z "$TEST_TYPE" ]]; then
              TEST_TYPE="openapi-test"
          fi
          make ${TEST_TYPE} | tee -a ${file_log}
          
          test_ret="$( grep "Test Suite Failed" ${file_log} || true )"
          test_result="[PASSED]"
          if [[ -n "$test_ret" ]]; then
              test_result="[FAILED]"
          fi
          
          case "$TEST_TYPE" in
              openapi-test)
                  echo openapi-test-result="${test_result}" >> $GITHUB_OUTPUT
              ;;
              adminapi-test)
                  echo adminapi-test-result="${test_result}" >> $GITHUB_OUTPUT
              ;;
              engine-test)
                  echo engine-test-result="${test_result}" >> $GITHUB_OUTPUT
              ;;
              *)
                  echo test-result="${test_result}" >> $GITHUB_OUTPUT
              ;;
          esac
          
          if [[ -n "$test_ret" ]]; then
              exit 1
          fi

  send-message:
    needs: [ e2e-test ]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Checkout apecloud-cd Code
        uses: actions/checkout@v4
        with:
          repository: apecloud/apecloud-cd

      - name: send test result message
        run: |
          CLOUD_BRANCH="${{ inputs.CLOUD_BRANCH }}"
          if [[ -z "$CLOUD_BRANCH" ]]; then
              CLOUD_BRANCH="main"
          fi
          
          CLOUD_ENV_NAME="${{ inputs.CLOUD_ENV_NAME }}"
          if [[ -z "$CLOUD_ENV_NAME" ]]; then
              CLOUD_ENV_NAME="dev"
          fi
          
          TEST_RESULT=""
          TEST_TYPES="${{ inputs.TEST_TYPE }}"
          TEST_TYPES="openapi-test|adminapi-test|engine-test"
          for test_type_tmp in $(echo "${TEST_TYPES}" | sed 's/|/ /g' ); do
              case "$test_type_tmp" in
                  openapi-test)
                      TEST_RESULT="${test_type_tmp}|${{ needs.e2e-test.outputs.openapi-test-result }}"
                  ;;
                  adminapi-test)
                      TEST_RESULT="${test_type_tmp}|${{ needs.e2e-test.outputs.adminapi-test-result }}"
                  ;;
                  engine-test)
                      TEST_RESULT="${test_type_tmp}|${{ needs.e2e-test.outputs.engine-test-result }}"
                  ;;
                  *)
                      TEST_RESULT="${test_type_tmp}|${{ needs.e2e-test.outputs.test-result }}"
                  ;;
              esac
          done
          
          echo "${TEST_RESULT}" 
          TEST_RESULT=$( bash .github/utils/utils.sh --type 12 \
              --github-repo "${{ github.repository }}" \
              --github-token "${{ env.GITHUB_TOKEN }}" \
              --test-result "${TEST_RESULT}" \
              --run-id "$GITHUB_RUN_ID" )
          echo $TEST_RESULT
          
          date_ret=$(date +%Y-%m-%d-%T)
          TEST_TITLE="[${CLOUD_BRANCH}] Cloud E2E Api Test ${{ inputs.TEST_ENGINES }} on Env:${CLOUD_ENV_NAME} [${date_ret}]"
          
          python3 .github/utils/send_mesage.py \
              --url "${{ vars.TEST_BOT_WEBHOOK }}" \
              --title "$TEST_TITLE" \
              --result "$TEST_RESULT"
